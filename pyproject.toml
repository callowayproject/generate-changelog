[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "generate_changelog"
description = "Generate a changelog file from a local git checkout"
license = { file = "LICENSE" }
authors = [{ name = "Corey Oordt", email = "coreyoordt@gmail.com" }]
classifiers = [
    "Environment :: Console",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Version Control :: Git",
]
keywords = ["changelog", "change", "git", "commit"]
requires-python = ">=3.9"
dynamic = ["version"]
dependencies = [
    "click>=8.1.7",
    "GitPython",
    "jinja2",
    "more-itertools",
    "rich-click>=1.8.4",
    "ruamel.yaml",
    'typing_extensions;python_version<"3.10"',
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/callowayproject/generate_changelog"
Documentation = "https://callowayproject.github.io/generate-changelog/"
Source = "https://github.com/callowayproject/generate-changelog"

[project.scripts]
generate-changelog = "generate_changelog.cli:cli"

[dependency-groups]
dev = [
    "bump-my-version",
    "generate-changelog",
    "git-fame>=1.12.2",
]
docs = [
    "black>=23.3.0",
    "griffe-pydantic",
    "markdown-customblocks",
    "mdx-truly-sane-lists",
    "mkdocs>=1.4.3",
    "mkdocs-click",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-git-authors-plugin",
    "mkdocs-git-committers-plugin",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-include-markdown-plugin",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-material>=9.1.0",
    "mkdocs-section-index>=0.3.5",
    "mkdocstrings[python]",
    "python-frontmatter"
]
test = [
    "coverage[toml]",
    "faker",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-mock",
]

[tool.hatch.version]
path = "generate_changelog/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["generate_changelog"]

[tool.coverage.run]
branch = true
relative_files = true
omit = ["**/test_*.py"]

[tool.coverage.report]
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
    "*templates*",
]
show_missing = true
exclude_lines = [
    "raise NotImplementedError",
    "pragma: no.cover",
    "pragma: no.branch"
]

[tool.pytest.ini_options]
addopts = [
    "--cov=generate_changelog",
    "--cov-branch",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-report=xml",
    "--ignore=old"
]
norecursedirs = [
    ".*",
    "build",
    "dist",
    "{arch}",
    "*.egg",
    "venv",
    "requirements*",
    "lib",
]
python_files = "test*.py"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 95
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[tool.black]
line-length = 119

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 119

[tool.ruff.lint]
preview = true
select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "B", # flake8-bugbear
    "BLE", # flake8-blind except
    "C4", # flake8-comprehensions
    "C90", # McCabe complexity
    "D", # pydocstyle
    "E", # pycodestyle errors
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "N", # PEP8 naming
    "NPY", # NumPy-specific rules
    "PD", # Pandas-vet
    "PERF", # Perflint
    "PGH", # PyGrep hooks
    "PLC", # Pylint conventions
    "PLE", # Pylint errors
    "PLW", # Pylint warnings
    "Q", # flake8-quotes
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "TCH", # Flake8 type-checking
    "W", # pycodestyle warnings
]
ignore = [
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN204", # missing-return-type-special-method
    "ANN401", # any-type
    "S101", # assert
    "S104", # hardcoded-bind-all-interfaces
    "S404", # suspicious-subprocess-import
    "S602", # subprocess-popen-with-shell-equals-true
    "D105", # undocumented-magic-method
    "D106", # undocumented-public-nested-class
    "D107", # undocumented-public-init
    "D200", # fits-on-one-line
    "D212", # multi-line-summary-first-line
    "PD011", # pandas-use-of-dot-values
    "PLC0415", # import-outside-toplevel
    "PLW0108", # unnecessary-lambda
    "PLW1641", # eq-without-hash
]

fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

typing-modules = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR0913", "PLR0915", "PGH003", "ANN001", "ANN202", "ANN201", "PLR0912", "TRY301", "PLW0603", "PLR2004", "ANN101", "S106", "TRY201", "ANN003", "ANN002", "S105", "TRY003"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
order-by-type = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.pydoclint]
style = "google"
exclude = '\.git|tests'
require-return-section-when-returning-nothing = false
arg-type-hints-in-docstring = false
check-return-types = false
quiet = true

[tool.bumpversion]
allow_dirty = true
current_version = "0.14.0"
commit = true
commit_args = "--no-verify"
tag = true
tag_name = "{new_version}"
moveable_tags = [
    "v{new_major}",
    "v{new_major}.{new_minor}",
]
parse = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\.(?P<dev>post)\d+\.dev\d+)?'
serialize = [
    "{major}.{minor}.{patch}.{dev}{$PR_NUMBER}.dev{$REVISION}",
    "{major}.{minor}.{patch}"
]
message = "Version updated from {current_version} to {new_version}"
pre_commit_hooks = ["uv sync --upgrade", "git add uv.lock"]

[tool.bumpversion.parts.dev]
values = ["release", "post"]

[[tool.bumpversion.files]]
filename = "generate_changelog/__init__.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"

[[tool.bumpversion.files]]
filename = "action.yml"
search = "generate-changelog:v{current_major}"
replace = "generate-changelog:v{new_major}"

[[tool.bumpversion.files]]
filename = "Dockerfile"

[[tool.bumpversion.files]]
filename = "Dockerfile"
search = "created=\\d{{4}}-\\d{{2}}-\\d{{2}}T\\d{{2}}:\\d{{2}}:\\d{{2}}Z"
replace = "created={utcnow:%Y-%m-%dT%H:%M:%SZ}"
regex = true
