[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "generate_changelog"
description = "Generate a changelog file from a local git checkout"
license = { text = "MIT" }
authors = [{ name = "Corey Oordt", email = "coreyoordt@gmail.com" }]
classifiers = [
    "Environment :: Console",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Version Control :: Git",
]
keywords = ["changelog", "change", "git", "commit"]
requires-python = ">=3.7"
dynamic = ["version"]
dependencies = [
    'backports.cached-property;python_version<"3.8"',
    "GitPython",
    "jinja2",
    "more-itertools",
    "ruamel.yaml",
    "typer>=0.9.0",
    'typing_extensions;python_version<"3.10"',
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/callowayproject/generate_changelog"
Documentation = "https://callowayproject.github.io/generate-changelog/"
Source = "https://github.com/callowayproject/generate-changelog"

[project.scripts]
generate-changelog = "generate_changelog.cli:app"

[project.optional-dependencies]
dev = [
    "bump-my-version",
    "generate-changelog",
    "git-fame>=1.12.2",
]
docs = [
    "furo",
    "ghp-import",
    "linkify-it-py",
    "myst-parser",
    "Sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-click",
    "sphinx-copybutton",
]
test = [
    "coverage[toml]",
    "faker",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-mock",
]

[tool.setuptools]
zip-safe = false
include-package-data = true
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
exclude = [
    "example*",
    "tests*",
    "docs*",
    "build",
]
namespaces = false

[tool.setuptools.dynamic]
version = {attr = "generate_changelog.__version__"}

[tool.coverage.run]
branch = true
relative_files = true
omit = ["**/test_*.py"]

[tool.coverage.report]
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
    "*templates*",
]
show_missing = true
exclude_lines = [
    "raise NotImplementedError",
    "pragma: no.cover",
    "pragma: no.branch"
]

[tool.pytest.ini_options]
addopts = [
    "--cov=generate_changelog",
    "--cov-branch",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-report=xml",
    "--ignore=old"
]
norecursedirs = [
    ".*",
    "build",
    "dist",
    "{arch}",
    "*.egg",
    "venv",
    "requirements*",
    "lib",
]
python_files = "test*.py"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 95
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[tool.isort]
py_version = "38"
force_grid_wrap = 0
use_parentheses = true
line_length = 119
known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.pydocstyle]
convention = "google"
add-ignore = ["D105", "D107", "D200", "D212"]
match = "(?!test_).*\\.py"

[tool.black]
line-length = 119

[tool.bumpversion]
current_version = "0.9.2"
commit = true
commit_args = "--no-verify"
tag = true
tag_name = "{new_version}"
parse = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\+\w+-(?P<dev>\d+))?'
serialize = [
    "{major}.{minor}.{patch}+{$BRANCH_NAME}-{dev}",
    "{major}.{minor}.{patch}",
]
message = "Version updated from {current_version} to {new_version}"

[[tool.bumpversion.files]]
filename = "generate_changelog/__init__.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"
