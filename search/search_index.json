{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Generate Changelog","text":"<p><code>generate-changelog</code> does what it says: it generates a full changelog, or updates an existing one. Git tags and commits are the inputs by which <code>generate-changelog</code> performs its task.</p> <p>The primary goal of this tool was to provide the benefits of conventional commits without requiring a strict syntax. <code>generate-changelog</code> accomplishes this using configurable regular expressions or commit metadata matching. The thought is natural language is easier for developers to remember and requires less tooling to enforce.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#commit-and-tag-processing","title":"Commit and tag processing","text":"<ul> <li>Filter out commits and tags based on regular expression matching.</li> <li>Classify commit messages into sections such as \u201cNew\u201d, \u201cFixes\u201d, and \u201cChanges\u201d using configurable regular expressions, metadata, or custom criteria.</li> <li>Rewrite commit summary or commit body using pipelines of actions.</li> <li>Extract parts of the commit summary or body into metadata available for templates and filters.</li> <li>Built-in issue parsers for Jira, GitHub, Azure DevOps Board.</li> <li>Built-in conventional commit parser</li> </ul>"},{"location":"#changelog-rendering","title":"Changelog rendering","text":"<ul> <li>Templated using Jinja templates.</li> <li>Each template has a large amount of metadata that allows linking to a commit, a version diff, and issue trackers.</li> <li>Easily customize just the template you want.</li> <li>Supports full or incremental changelog generation.</li> </ul>"},{"location":"#release-hints","title":"Release hints","text":"<ul> <li>Can use user-defined rules to suggest a release type for use in another part of your CI pipeline.</li> </ul>"},{"location":"#git-support","title":"Git support","text":"<ul> <li>Supports your merge or rebase workflows and complicated git histories.</li> <li>Supports of multi-authors for one commit through configurable trailers key values.</li> <li>Built-in parser for turning trailers key values into metadata.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.9 or higher.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install generate-changelog\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Create a default configuration file.</p> <pre><code>$ generate-changelog --generate-config\n</code></pre> <p>This creates a file named <code>.changelog-config.yaml</code>. You can make changes to the default configuration.</p> <p>Generate your changelog via:</p> <pre><code>$ generate-changelog\n</code></pre>"},{"location":"#github-action","title":"GitHub Action","text":""},{"location":"#inputs","title":"Inputs","text":"<ul> <li><code>config_file</code> Path to the config file if it is not one of the defaults.</li> <li><code>starting_tag</code> Starting tag to generate a changelog from. Default is to start from the last tag in the current change log.</li> <li><code>skip_output_pipeline</code> Do not generate or update the CHANGELOG, but still return the release hint.</li> <li><code>branch_override</code> Override the current branch for release hint decisions.</li> </ul>"},{"location":"#outputs","title":"Outputs","text":"<ul> <li><code>release_hint</code> The suggested release type for the current or <code>branch_override</code> branch.</li> </ul>"},{"location":"#generated-files","title":"Generated files","text":"<p>The changelog file is written based on the configuration and value of the <code>branch_override</code> input. This file is not added to your Git repo.  You must add and commit it if you want to keep it.</p>"},{"location":"#example-usage","title":"Example usage","text":"<pre><code>on: [push]\n\njobs:\n  sample_job:\n    runs-on: ubuntu-latest\n    name: Just an example\n    steps:\n      - name: Generate changelog and release hint\n        id: changelog\n        uses: callowayproject/generate-changelog@v1\n        with:\n          config_file: .changelog-config.yaml\n      - name: Use the release hint\n        run: echo \"The release hint was ${{ steps.changelog.outputs.release_hint }}\"\n</code></pre>"},{"location":"explanation/","title":"How Generate Changelog Works","text":"<p>Generate Changelog requires a git tag to indicate each version, or release, in the git repository.</p> <p>The two foundational functions are getting the starting tag and processing the commits from that starting point. Based on the results of these functions, we can suggest a release hint and render a change log and release notes.</p>"},{"location":"explanation/#get-the-starting-tag","title":"Get the starting tag","text":"<p>This step determines the processing starting point using the <code>--starting-tag</code> command line option or the <code>starting_tag_pipeline</code> configuration. If no starting tag is found, it starts at the first commit.</p>"},{"location":"explanation/#process-commits","title":"Process commits","text":"<p>This step filters and processes each commit from a starting point and converts it to a <code>CommitContext</code>.</p> <p>For each commit since the starting point:</p> <ol> <li>Discard the commit if it matches the <code>ignore_patterns</code> configuration.</li> <li>Run the <code>summary</code> line through the <code>summary_pipeline</code> configuration.</li> <li>Run the <code>body</code> through the <code>body_pipeline</code> configuration.</li> <li>Assign the commit a <code>category</code> based on the first matching item in the <code>commit_classifiers</code> configuration.</li> <li>Assign the commit a <code>grouping</code> based on the <code>group_by</code> configuration.</li> <li>Create a <code>CommitContext</code> from the commit\u2019s processed attributes.</li> </ol>"},{"location":"explanation/#process-tags","title":"Process tags","text":"<p>This step gathers and filters all tags from a starting point and converts them to a <code>VersionContext</code>.</p> <p>For each tag since the starting point:</p> <ol> <li>Discard the tag if it does not match the <code>tag_pattern</code> configuration.</li> <li>Convert the tag to a <code>VersionContext</code>.</li> <li>Assign each <code>CommitContext</code> to a <code>VersionContext</code> according to its tag if the underlying commit is tagged or the next valid tag in the timeline. </li> <li> <p>Assign <code>CommitContext</code>s since the last tag assigned a <code>VersionContext</code> named <code>unreleased_label</code>.</p> </li> <li> <p>Each <code>VersionContext</code> sorts its assigned <code>CommitContext</code>s by its <code>grouping</code> attribute.</p> </li> </ol>"},{"location":"explanation/#optional-suggest-a-release-type","title":"Optional: suggest a release type","text":"<p>This is a map-reduce function where each rule in the <code>release_hint_rules</code> configuration is applied to each <code>CommitContext</code> in the unreleased <code>VersionContext</code> and returns a <code>release_type</code>. The resulting values are reduced to the maximum value according to this listing:</p> <ol> <li>no-release</li> <li>alpha</li> <li>beta</li> <li>dev</li> <li>pre-release</li> <li>release-candidate</li> <li>patch</li> <li>minor</li> <li>major</li> </ol>"},{"location":"explanation/#render-the-changelog","title":"Render the changelog","text":"<p>This involves rendering a complete or partial changelog using Jinja templates. For incremental change logs (those with a starting tag), only the <code>heading.md.jinja</code> and <code>versions.md.jinja</code> templates are rendered and returned. For full change logs, the <code>base.md.jinja</code> template is rendered and returned.</p>"},{"location":"installation/","title":"Installation","text":"<p>title: Installation  summary: How to install generate-changelog.  date: {% now \u2018local\u2019, \u2018%Y-%m-%d\u2019 %}</p>"},{"location":"installation/#installing-the-stable-release-from-pypi","title":"Installing the Stable Release from PyPI","text":"<p>To install generate-changelog, run this command in your terminal:</p> <pre><code>$ pip install generate-changelog\n</code></pre> <p>This is the preferred method to install <code>generate-changelog</code>, as it will always install the most recent stable release. You can also replace <code>pip</code> with <code>pipx</code>.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Getting started quickly with Generate Changelog.</p>"},{"location":"quickstart/#install","title":"Install","text":"<pre><code>$ pip install generate-changelog\n</code></pre>"},{"location":"quickstart/#generate-a-configuration-file","title":"Generate a configuration file","text":"<p><pre><code>$ generate-changelog --generate-config\n</code></pre> This creates a file named <code>.changelog-config.yaml</code>. You can make changes to the default configuration.</p>"},{"location":"quickstart/#generate-your-changelog","title":"Generate your changelog","text":"<pre><code>$ generate-changelog\n</code></pre>"},{"location":"howtos/configuration/","title":"Configuring Your Changelog Generation","text":""},{"location":"howtos/configuration/#the-configuration-file","title":"The configuration file","text":"<p><code>generate-changelog</code> uses its default configuration as a base, and then updates it with your configuration file. This allows you to keep your configuration file small and only override what you need.</p> <p>You simply put a <code>.changelog-config.yaml</code> file in the root directory of your repository for the configuration file. You can dump the defaults with:</p> <pre><code>$ generate-changelog --generate-config\n</code></pre> <p>Since your configuration only needs to contain the differences from the default values, you can delete the default configurations you like and keep your changes.</p> <p>All configuration string values are treated as Jinja templates, except for the <code>variables</code> section. </p> <p>Some values accept pipelines, which are a chain of actions that transform an input.</p>"},{"location":"howtos/configuration/#general-configuration-options","title":"General Configuration Options","text":"<p>(configuration-variables)=</p>"},{"location":"howtos/configuration/#variables","title":"variables","text":"<p>:YAML type: <code>mapping</code></p> <p>:Description:   Variables are key-value pairs for use in other parts of the configuration and in template rendering. Variable values can include references to previous variables.</p> <p>Each configuration string value is treated as a Jinja template. You can reference your variables using <code>{{ my_variable }}</code> markup.</p> <p>:Default: <code>{}</code></p> <p>:Example:</p> <p>Referencing variables within variables:</p> <pre><code>variables:\n  root_url: https://www.example.com/\n  sub_url: {{ root_url }}sub_path/2\n</code></pre> <p>You can use variables in the rendering of your changelog templates. If the configuration file contains:</p> <pre><code>variables:\n  repo_url: https://github.com/callowayproject/generate-changelog\n</code></pre> <p>You can reference it in your <code>commit.md.jinja</code> template like:</p> <pre><code>[{{ commit.short_sha }}]({{ repo_url }}/commit/{{ commit.sha }})\n</code></pre> <p>You can also use variables in <code>args</code> and <code>kwargs</code> values in your configuration:</p> <pre><code>variables:\n  changelog_file: CHANGELOG.md\n\nstarting_tag_pipeline:\n  - action: ReadFile\n    kwargs:\n      filename: {{ changelog_file }} \n</code></pre> <p>(configuration-starting_tag_pipeline)=</p>"},{"location":"howtos/configuration/#starting_tag_pipeline","title":"starting_tag_pipeline","text":"<p>:YAML type: <code>sequence</code> of <code>mapping</code></p> <p>:Description:   Generate the changelog from the tag returned by this pipeline.</p> <p>The default value reads your <code>CHANGELOG.md</code> file and looks for the first level 2 heading like <code>## 1.1.1 (2022-01-01)</code> and returns the <code>1.1.1</code> part. This configuration will generate a full changelog if either <code>CHANGELOG.md</code> doesn\u2019t exist or the pattern is not found. </p> <p>These defaults are also the basis for generating an incremental changelog. Setting <code>starting_tag_pipeline</code> to nothing will cause it to generate a full changelog each time.</p> <p>:Default:   <pre><code>starting_tag_pipeline:\n  - action: ReadFile\n    kwargs:\n      filename: CHANGELOG.md\n  - action: FirstRegExMatch\n    kwargs:\n      pattern: (?im)^## (?P&lt;rev&gt;\\d+\\.\\d+(?:\\.\\d+)?)\\s+\\(\\d+-\\d{2}-\\d{2}\\)$\n      named_subgroup: rev\n</code></pre></p>"},{"location":"howtos/configuration/#output-configuration-options","title":"Output Configuration Options","text":"<p>(configuration-unreleased_label)=</p>"},{"location":"howtos/configuration/#unreleased_label","title":"unreleased_label","text":"<p>:YAML type: <code>str</code></p> <p>:Description:     This value is used as the section title of the changes since the last valid tag, instead of the version number.</p> <p>:Default: <code>Unreleased</code></p> <p>(configuration-tag_pattern)=</p>"},{"location":"howtos/configuration/#tag_pattern","title":"tag_pattern","text":"<p>:YAML type: <code>str</code></p> <p>:Description:   Only tags matching this regular expression are used as \u201cversions\u201d for the changelog.</p> <p>The default pattern matches SemVer versions like <code>1.1.1</code> and <code>1.1</code>.</p> <p>This allows you to have other tags, such as beta or development versions that do not show up in the changelog.</p> <p>:Default: <code>^[0-9]+\\.[0-9]+(?:\\.[0-9]+)?$</code></p> <p>(configuration-output_pipeline)=</p>"},{"location":"howtos/configuration/#output_pipeline","title":"output_pipeline","text":"<p>:YAML type: <code>sequence</code> of <code>mapping</code></p> <p>:Description:   Pipeline to do something with the full or partial changelog.</p> <p>The default value reads your <code>CHANGELOG.md</code> file and looks for the first level 2 heading like <code>## 1.1.1 (2022-01-01)</code>. If found, all content above that point in the file is replaced with the generated content. If the pattern is not found, all content in the file is replaced. </p> <p>:Default:   <pre><code>output_pipeline:\n  - action: IncrementalFileInsert\n    kwargs:\n      filename: CHANGELOG.md\n      last_heading_pattern: (?im)^## \\d+\\.\\d+(?:\\.\\d+)?\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)$\n</code></pre></p> <p>(configuration-template_dirs)=</p>"},{"location":"howtos/configuration/#template_dirs","title":"template_dirs","text":"<p>:YAML type: <code>sequence</code> of <code>str</code></p> <p>:Description:   Paths to look for output generation templates.</p> <p>:Default:</p> <pre><code>template_dirs:\n  - .github/changelog_templates/\n</code></pre> <p>(configuration-group_by)=</p>"},{"location":"howtos/configuration/#group_by","title":"group_by","text":"<p>:YAML type: <code>sequence</code> of <code>str</code></p> <p>:Description:   Group the commits within a version by these commit attributes. Valid values are any attributes of a Commit Context. Use dot notation to specify dictionary keys, object attributes or sequence indexes. For example, <code>authors.0.name</code> references the first author\u2019s <code>name</code> key in the <code>authors</code> list.</p> <p>:Default:</p> <pre><code>group_by:\n  - metadata.category\n</code></pre>"},{"location":"howtos/configuration/#commit-parsing-options","title":"Commit Parsing Options","text":"<p>(configuration-summary_pipeline)=</p>"},{"location":"howtos/configuration/#summary_pipeline","title":"summary_pipeline","text":"<p>:YAML type: <code>sequence</code> of <code>mapping</code></p> <p>:Description:   Process the commit\u2019s subject for use in the changelog. The pipeline will get the subject line of the commit as its input. The output of the pipeline is rendered into the changelog.</p> <p>The default pipeline normalizes the string by:</p> <p>1. Stripping leading and trailing spaces   2. Stripping trailing periods   3. Setting the value to <code>no commit message</code> if there isn\u2019t one   4. Capitalizing the first letter   5. Adding a period to the end</p> <p>:Default:   <pre><code>summary_pipeline:\n  - action: strip_spaces\n  - action: Strip\n    comment: Get rid of any periods so we don't get double periods\n    kwargs:\n      chars: .\n  - action: SetDefault\n    args:\n    - no commit message\n  - action: capitalize\n  - action: append_dot\n</code></pre></p> <p>(configuration-body_pipeline)=</p>"},{"location":"howtos/configuration/#body_pipeline","title":"body_pipeline","text":"<p>:YAML type: <code>sequence</code> of <code>mapping</code></p> <p>:Description:   Process the commit\u2019s body for use in the changelog.</p> <p>The default value will strip the trailers from the commit message and put them into the commit\u2019s <code>metadata[\"trailers\"]</code> attribute.</p> <p>:Default:   <pre><code>body_pipeline:\n  - action: ParseTrailers\n    comment: Parse the trailers into metadata.\n    kwargs:\n      commit_metadata: save_commit_metadata\n</code></pre></p> <p>(configuration-include_merges)=</p>"},{"location":"howtos/configuration/#include_merges","title":"include_merges","text":"<p>:YAML type: bool = False</p> <p>:Description:   Tells git-log whether to include merge commits in the log.</p> <p>:Default: <code>false</code></p> <p>(configuration-ignore_patterns)=</p>"},{"location":"howtos/configuration/#ignore_patterns","title":"ignore_patterns","text":"<p>:YAML type: <code>sequence</code> of <code>str</code></p> <p>:Description:   Ignore commits that match any of these regular expression patterns.</p> <p>:Default:   <pre><code>ignore_patterns:\n  - '[@!]minor'\n  - '[@!]cosmetic'\n  - '[@!]refactor'\n  - '[@!]wip'\n  - ^$\n  - ^Merge branch\n  - ^Merge pull\n</code></pre></p> <p>(configuration-commit_classifiers)=</p>"},{"location":"howtos/configuration/#commit_classifiers","title":"commit_classifiers","text":"<p>:YAML type: <code>sequence</code> of <code>mapping</code></p> <p>:Description:   Group commits into categories if they match any of these regular expressions.</p> <p>The default uses categories of <code>New</code> for commits that add new things; <code>Updates</code> for commits that change things; <code>Fixes</code> for commits that fix things; and <code>Other</code> for commits that aren\u2019t matched by other sections.</p> <p>:Default:</p> <pre><code>section_patterns:\n  New:\n  - (?i)^(?:new|add)[^\\n]*$\n  Updates:\n  - (?i)^(?:update|change|rename|remove|delete|improve|refactor|chg)[^\\n]*$\n  Fixes:\n  - (?i)^(?:fix)[^\\n]*$\n  Other: null\n</code></pre> <p>(configuration-valid_author_tokens)=</p>"},{"location":"howtos/configuration/#valid_author_tokens","title":"valid_author_tokens","text":"<p>:YAML type: <code>sequence</code> of <code>str</code></p> <p>:Description:   Tokens in git commit trailers that indicate authorship.</p> <p>If <code>ParseTrailers</code> is in the <code>body_pipeline</code> configuration, the values are parsed and available in the commit\u2019s <code>authors</code> and <code>author_names</code> attributes.</p> <p>:Default:   <pre><code>valid_author_tokens:\n- author\n- based-on-a-patch-by\n- based-on-patch-by\n- co-authored-by\n- co-committed-by\n- contributions-by\n- from\n- helped-by\n- improved-by\n- original-patch-by\n</code></pre></p>"},{"location":"howtos/configuration/#release-hinting-options","title":"Release Hinting Options","text":"<p>(configuration-release_hint_rules)=</p>"},{"location":"howtos/configuration/#release_hint_rules","title":"release_hint_rules","text":"<p>:YAML type: <code>sequence</code> of <code>mapping</code></p> <p>:Description: Rules applied to unreleased commits to determine the type of release to suggest.</p> <p>:Default:   <pre><code>release_hint_rules:\n  - match_result: \"patch\"\n    no_match_result: \"no-release\"\n    grouping: \"Other\"\n  - match_result: \"patch\"\n    no_match_result: \"no-release\"\n    grouping: \"Fixes\"\n  - match_result: \"minor\"\n    no_match_result: \"no-release\"\n    grouping: \"Updates\"\n  - match_result: \"minor\"\n    no_match_result: \"no-release\"\n    grouping: \"New\"\n  - match_result: \"major\"\n    no_match_result: \"no-release\"\n    grouping: \"Breaking Changes\"\n</code></pre></p>"},{"location":"howtos/conventional-commits/","title":"Conventional Commits","text":""},{"location":"howtos/conventional-commits/#configuration","title":"Configuration","text":"<p>Add the <code>ParseConventionalCommit</code> action to the <code>summary_pipeline</code> configuration.</p> <p>```{literalinclude} ../../test/fixtures/conventional-commit.yaml :language: yaml :lines: 1-20 :emphasize-lines: 9-12 <pre><code>Add the [`ParseBreakingChangeFooter`][generate_changelog.actions.metadata.ParseBreakingChangeFooter] action to the `body_pipeline` configuration.\n\n```{literalinclude} ../../test/fixtures/conventional-commit.yaml\n:language: yaml\n:lines: 21-29\n:emphasize-lines: 2-5\n</code></pre></p> <p>Update the <code>group_by</code> configuration. This example orders it by the category (set by the [<code>commit_classifiers</code>][generate_changelog.configuration.Configuration.commit_classifiers) and then by the first scope, if it exists.</p> <p>```{literalinclude} ../../test/fixtures/conventional-commit.yaml :language: yaml :lines: 30-32 :emphasize-lines: 2-3 <pre><code>Set the [`commit_classifiers`](configuration-commit_classifiers) configuration.\n\n```{literalinclude} ../../test/fixtures/conventional-commit.yaml\n:language: yaml\n:lines: 33-53\n:emphasize-lines: 2-21\n</code></pre></p> <p>The commit is classsified by the first rule that matches. So the rules in this example are:</p> <ol> <li>\u201cBreaking Changes\u201d if the commit\u2019s metadata includes <code>has_breaking_change</code> and it is <code>True</code></li> <li>\u201cNew Features\u201d if the commit\u2019s metadata includes <code>commit_type</code> and it is <code>feat</code></li> <li>\u201cUpdates\u201d if the commit\u2019s metadata includes <code>commit_type</code> and it is <code>fix</code>, <code>refactor</code>, or <code>update</code></li> <li>\u201cOther\u201d if there are no other matches</li> </ol> <p>To filter out some commit types, use <code>ignore_patterns</code>:</p> <pre><code>ignore_patterns:\n  - (?i)^(?:build|chore|ci|docs|style|perf|test):\n</code></pre>"},{"location":"howtos/recipes/","title":"Configuration Recipes","text":""},{"location":"howtos/recipes/#specifying-regular-expression-flags","title":"Specifying regular expression flags","text":"<p>All regular expression actions have the following boolean parameters:</p> <ul> <li>ascii_flag</li> <li>ignorecase_flag</li> <li>locale_flag</li> <li>multiline_flag</li> <li>dotall_flag</li> <li>verbose_flag</li> </ul> <p>For example, this sets the <code>multiline_flag</code> and the <code>ignorecase_flag</code>:</p> <pre><code>- action: FirstRegExMatch\n  kwargs:\n    pattern: ^## (?P&lt;rev&gt;\\d+\\.\\d+(?:\\.\\d+)?)\\s+\\(\\d+-\\d{2}-\\d{2}\\)$\n    named_subgroup: rev\n    ignorecase_flag: true\n    multiline_flag: true\n</code></pre> <p>You can also use inline notation <code>(?&lt;flags&gt;)</code> where <code>&lt;flags&gt;</code> is one or more of <code>a</code> (ASCII), <code>i</code> (ignore case), <code>l</code> (locale), <code>m</code> (multi-line), <code>s</code> (dot matches all), or <code>x</code> (verbose). </p> <p>This is equivalent to the above example, with <code>(?im)</code> setting the <code>multiline_flag</code> and <code>ignorecase_flag</code>:</p> <pre><code>- action: FirstRegExMatch\n  kwargs:\n    pattern: (?im)^## (?P&lt;rev&gt;\\d+\\.\\d+(?:\\.\\d+)?)\\s+\\(\\d+-\\d{2}-\\d{2}\\)$\n    named_subgroup: rev\n</code></pre>"},{"location":"howtos/recipes/#incremental-change-logs","title":"Incremental change logs","text":"<p>This will generate a change log for everything since the last version in the change log. This example assumes your version headings are formatted like <code>## 1.0.2 (2022-01-01)</code>.</p> <p>All content above the matched <code>last_heading_pattern</code> is replaced with the newly generated content.</p> <pre><code>starting_tag_pipeline:\n- action: ReadFile\n  comment: Read the existing change log file\n  kwargs:\n    filename: CHANGELOG.md\n- action: FirstRegExMatch\n  comment: Find the name of the latest version using the headings\n  kwargs:\n    pattern: (?im)^## (?P&lt;rev&gt;\\d+\\.\\d+(?:\\.\\d+)?)\\s+\\(\\d+-\\d{2}-\\d{2}\\)$\n    named_subgroup: rev\n\noutput_pipeline:\n- action: IncrementalFileInsert\n  kwargs:\n    filename: CHANGELOG.md\n    last_heading_pattern: (?im)^## \\d+\\.\\d+(?:\\.\\d+)?\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)$\n</code></pre>"},{"location":"howtos/recipes/#providing-links-to-commits-and-version-diffs","title":"Providing links to commits and version diffs","text":"<p>With a bit of configuration and custom templating, you can provide a link to each commit and a diff between versions on your git repository.</p> <p>Add the link to your repository as a <code>configuration variable</code>:</p> <pre><code>variables:\n  repo_url: https://github.com/coordt/generate-changelog\n</code></pre> <p>Then create a <code>version_heading.md.jinja</code> file in <code>.github/changelog_templates/</code> or other <code>configured template directory</code>. Its contents should be similar to the following:</p> <pre><code>## {{ version.label }} ({{ version.date_time.strftime(\"%Y-%m-%d\") }})\n\n[Compare the full difference.]({{ repo_url }}/compare/{{ version.previous_tag }}...{{ version.tag }})\n</code></pre> <pre><code>If you use this pattern and generate the changelog before tagging the commit, the `version.tag` will always be `HEAD`.\n\nYou will need to either manually change this or use an automated method such as [bump2version](https://github.com/c4urself/bump2version). [See below for more information.](#incremental-changelog-with-bump2version)\n</code></pre> <p>For showing a specific commit link, create a <code>commit.md.jinja</code> file in <code>.github/changelog_templates/</code> or other <code>configured template directory</code>. Its contents should include something like  <pre><code>[{{ commit.short_sha }}]({{ repo_url }}/commit/{{ commit.sha }})\n</code></pre></p> <p>For example:</p> <pre><code>- {{ commit.summary }} [{{ commit.short_sha }}]({{ repo_url }}/commit/{{ commit.sha }})\n  {{ commit.body|indent(2, first=True) }}\n  {% for key, val in commit.metadata[\"trailers\"].items() %}\n  {% if key not in VALID_AUTHOR_TOKENS %}\n  **{{ key }}:** {{ val|join(\", \") }}\n\n  {% endif %}\n{% endfor %}\n</code></pre>"},{"location":"howtos/recipes/#incremental-changelog-with-bump2version","title":"Incremental changelog with bump2version","text":"<p>You can generate the incremental changelog just before using bump2version to bump the version of your project.</p> <p>First, follow the steps for configuring generate-changelog for incremental change logs.</p> <p>Then configure bump2version to modify the CHANGELOG.md file:</p> <pre><code>[bumpversion:file(version heading):CHANGELOG.md]\nsearch = Unreleased\n</code></pre> <p>If you are including links to version diffs, also add:</p> <pre><code>[bumpversion:file(diff link):CHANGELOG.md]\nsearch = {current_version}...HEAD\nreplace = {current_version}...{new_version}\n</code></pre>"},{"location":"howtos/recipes/#parsing-commit-trailers","title":"Parsing commit trailers","text":"<pre><code>body_pipeline:\n- action: ParseTrailers\n  comment: Parse the trailers into metadata.\n  kwargs:\n    commit_metadata: save_commit_metadata\n\ntemplate_dirs:\n  - \".github/changelog_templates/\"\n</code></pre> <p>Then create a directory in <code>.github</code> called <code>changelog_templates</code>. Create a file named <code>commit.md.jinja</code> with contents similar to:</p> <pre><code>- {{ commit.summary }}\n  {{ commit.body|indent(2, first=True) }}\n  {% for key, val in commit.metadata[\"trailers\"].items() %}\n  {% if key not in VALID_AUTHOR_TOKENS %}\n  **{{ key }}:** {{ val|join(\", \") }}\n\n  {% endif %}\n{% endfor %}\n</code></pre> <p>This will render a commit similar to:</p> <pre><code>- This is the summary line.\n\n  This is a message body.\n\n  **bug:** #42\n\n  **change-id:** Ic8aaa0728a43936cd4c6e1ed590e01ba8f0fbf5b\n\n  **signed-off-by:** A. U. Thor &lt;committer@example.com&gt;\n\n  **cc:** R. E. Viewer &lt;reviewer@example.com&gt;\n\n  **subject:** This is a fake subject spanning to several lines\nas you can see\n</code></pre>"},{"location":"howtos/recipes/#showing-authors","title":"Showing authors","text":"<p>You can use this in the template like:</p> <pre><code>&lt;ul&gt;{% for author in commit.authors %}\n  &lt;li&gt;{{ author.name }} [{{ author.email }}]&lt;/li&gt;\n{% endfor %}&lt;/ul&gt;\n</code></pre> <p>or:</p> <pre><code>Author{% if commit.author_names|length &gt; 1 %}s{% endif %}: {{ commit.author_names|join(\", \") }}\n</code></pre>"},{"location":"howtos/release-hinting/","title":"Generating a release hint","text":""},{"location":"howtos/release-hinting/#what-is-a-release-hint","title":"What is a \u201crelease hint?\u201d","text":"<p>A release hint provides guidance on if and what type of software release is warranted. The guidance is based on user-defined rules applied to every <code>CommitContext</code> in the unreleased <code>VersionContext</code>. Each rule may use how the commit is grouped in the release, the files modified, or both.</p> <p>You can use this release hint as input to your release tooling. </p>"},{"location":"howtos/release-hinting/#methods-of-generating-the-hint","title":"Methods of generating the hint","text":"<p>Adding the {option}<code>--output</code> option to the command allows you to specify <code>hint</code> or <code>all</code>. <code>hint</code> will return the release hint after updating the change log. <code>all</code> will return a JSON object with a <code>release_hint</code> key after updating the change log.</p> <p>If you only want the hint, add the {option}<code>--skip-output-pipeline</code> option to <code>--output hint</code>.</p> <pre><code>$ generate-changelog --output hint --skip-output-pipeline\npatch\n</code></pre>"},{"location":"howtos/release-hinting/#release-rules","title":"Release rules","text":"<p>There are five parts to a release rule: <code>match_result</code>, <code>no_match_result</code>, <code>grouping</code>, <code>path</code>, and <code>branch</code>. Only <code>match_result</code> is required, but without a <code>grouping</code>, <code>path</code>, or <code>branch</code> value, the rule is ignored. <code>no_match_result</code> defaults to <code>no-release</code>.</p>"},{"location":"howtos/release-hinting/#match-result","title":"Match result","text":"<p>This is the hint returned if the <code>grouping</code>, <code>path</code> and <code>branch</code> evaluations return <code>True</code>. This is required.</p>"},{"location":"howtos/release-hinting/#no-match-result","title":"No match result","text":"<p>This is the hint returned if any of the <code>grouping</code>, <code>path</code>, or <code>branch</code> evaluations return <code>False</code>. By default, this is <code>no-release</code>.</p>"},{"location":"howtos/release-hinting/#grouping","title":"Grouping","text":"<p>The {attr}<code>.CommitContext.grouping</code> attribute is always a <code>tuple</code> with one or more string values.</p> <p>The value of {attr}<code>.ReleaseHint.grouping</code> will match the {attr}<code>.CommitContext.grouping</code> differently depending on its value:</p> <p>:string value:    The value is in the {attr}<code>.CommitContext.grouping</code>. For example: <code>\"New\"</code> would match both <code>(\"Features\", \"New\", )</code> and <code>(\"New\", )</code>.</p> <p>:sequence of string values:   The value must match the {attr}<code>.CommitContext.grouping</code> exactly. For example <code>(\"New\", )</code> would match <code>(\"New\", )</code> but not <code>(\"Features\", \"New\", )</code> or <code>(\"New\", \"Features\", )</code></p> <p>:sequence of string values ending with a \u201c*\u201d:   The value must match the beginning of the {attr}<code>.CommitContext.grouping</code>. For example <code>(\"New\", \"*\", )</code> would match <code>(\"New\", )</code> and <code>(\"New\", \"Features\", )</code> but not <code>(\"Features\", \"New\", )</code>. </p> <p>:None:   It will return a match and rely on the {attr}<code>.ReleaseHint.path</code> to match or not. This is saying \u201cI don\u2019t care about the grouping I only care about the path.\u201d</p>"},{"location":"howtos/release-hinting/#path","title":"Path","text":"<p>The {attr}<code>.CommitContext.files</code> attribute is a <code>set</code> of paths relative to the repository root. The {attr}<code>.ReleaseHint.path</code> uses globbing patterns to match against {attr}<code>.CommitContext.files</code>.</p>"},{"location":"howtos/release-hinting/#branch","title":"Branch","text":"<p>The {attr}<code>.ReleaseHint.branch</code> is a regular expression matched against the current branch. You can limit some release types to your primary branch, and others to non-primary branches.</p>"},{"location":"howtos/release-hinting/#examples","title":"Examples","text":"<p>This will provide a <code>patch</code> hint if the grouping contains \u201cOther\u201d, but only when a modified file is within the <code>src</code> directory and the current branch is either <code>master</code> or <code>main</code>. Otherwise, it will provide a \u201cno-release\u201d hint.</p> <p><pre><code>- match_result: patch\n  no_match_result: no-release\n  grouping: Other\n  path: src/*\n  branch: master|main\n</code></pre> This will provide a <code>dev</code> hint if the current branch is not <code>master</code> or <code>main</code>. For this to work all other rules must also specify a <code>branch</code> attribute. For example, <code>branch: master|main</code>.</p> <p><pre><code>- match_result: dev\n  no_match_result: no-release\n  branch: ^((?!master|main).)*$\n</code></pre> This will prevent any type of release if the current branch is not <code>master</code> or <code>main</code>. For this to work all other rules must also specify a <code>branch</code> attribute. For example, <code>branch: master|main</code>.</p> <pre><code>- match_result: no-release\n  no_match_result: no-release\n  branch: ^((?!master|main).)*$\n</code></pre>"},{"location":"howtos/releasing/","title":"Releasing","text":""},{"location":"howtos/releasing/#setting-requirements","title":"Setting Requirements","text":"<p>Your requirements are split into parts: <code>dev</code>, <code>prod</code>, and <code>test</code>. They exist in the directory <code>requirements</code>. <code>prod</code> requirements are required for your app to work properly. <code>dev</code> requirements are packages used to help develop this package, which include things for packaging the library and generating the changelog. <code>test</code> requirements are the libraries required to run tests.</p> <p>As you develop, you will likely only modify <code>requirements/prod.txt</code>.</p>"},{"location":"howtos/releasing/#releasing-your-app","title":"Releasing your app","text":"<p>Once you have developed and tested your app, or revisions to it, you need to release new version.</p>"},{"location":"howtos/releasing/#deciding-the-version","title":"Deciding the version","text":"<p>First decide how to increase the version. Using semantic versioning:</p> <p>Given a version number MAJOR.MINOR.PATCH, increment the:</p> <ol> <li>MAJOR version when you make incompatible API changes,</li> <li>MINOR version when you add functionality in a backwards-compatible manner, and</li> <li>PATCH version when you make backwards-compatible bug fixes.</li> </ol> <p>This is a judgement call, but here are some guidelines:</p> <ol> <li>A database change should be a MINOR version bump at least.</li> <li>If the PATCH version is getting above <code>10</code>, as in <code>1.0.14</code>, it is acceptable to do a MINOR version.</li> <li>Dropping or adding support of a version of Python or another dependency should be at least a MINOR version.</li> </ol>"},{"location":"howtos/releasing/#versioning-and-releasing","title":"Versioning and releasing","text":"<p>Once you\u2019ve decided how much of a version bump you are going to do, you will run one of three commands:</p> <p><code>make release-patch</code> will automatically change the patch version, e.g. <code>1.1.1</code> to <code>1.1.2</code>.</p> <p><code>make release-minor</code> will automatically change the minor version, e.g. <code>1.1.1</code> to <code>1.2.0</code>.</p> <p><code>make release-major</code> will automatically change the major version, e.g. <code>1.1.1</code> to <code>2.0.0</code>.</p> <p>Each of these commands do several things:</p> <ol> <li>Update the <code>CHANGELOG.md</code> file with the changes made since the last version, using the Git commit messages.</li> <li>Increments the appropriate version number in the appropriate way.</li> <li>Commits all the changes.</li> <li>Creates a Git tag with the version number.</li> <li>Pushes the repository and tags to the GitHub server.</li> </ol>"},{"location":"reference/cli/","title":"CLI Reference","text":""},{"location":"reference/cli/#generate-changelog","title":"generate-changelog","text":"<p>Generate a change log from git commits.</p> <p>Usage:</p> <pre><code>generate-changelog [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --generate-config               Generate a default configuration file\n  -c, --config FILE               Path to the config file.\n  -r, --repo-path TEXT            Path to the repository, if not within the\n                                  current directory\n  -t, --starting-tag TEXT         Tag to generate a changelog from.\n  -o, --output [release-hint|notes|all]\n                                  What output to generate.\n  --skip-output-pipeline          Do not execute the output pipeline in the\n                                  configuration.\n  -b, --branch-override TEXT      Override the current branch for release hint\n                                  decisions.\n  --version                       Show the version and exit.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/actions/","title":"Actions and Pipelines","text":""},{"location":"reference/actions/#introduction","title":"Introduction","text":"<p>Pipelines and actions are modeled after continuous integration systems such as GitHub Actions and Azure Pipelines, but simplified. A pipeline is a list of actions and actions are functions. It is easy to provide and specify custom actions.</p>"},{"location":"reference/actions/#actions","title":"Actions","text":"<p>Actions are callables that will accept a string and typically return a string.</p> <p>Two types:</p> <ul> <li>simple</li> <li>configurable</li> </ul>"},{"location":"reference/actions/#simple-actions","title":"Simple actions","text":"<p>A simple action is a function that accepts an argument and returns a value. Typically, both the argument and the return value are strings.</p>"},{"location":"reference/actions/#configurable-actions","title":"Configurable Actions","text":"<p>A configurable action is a class whose instances are callable. You can pass positional or keyword arguments to the class. The init method will store the arguments for use when the instance is called.</p> <p>The postional and keyword argument values can be:</p> <ul> <li>Scalar values</li> <li>Template strings</li> <li>Pipelines or actions</li> </ul>"},{"location":"reference/actions/#specifying-actions","title":"Specifying actions","text":"<p>A simple map in YAML. </p> <p><code>action</code> Required. A python path to a function or name of a built-in action.</p> <p><code>id</code> An optional identifier for the results of this action in the pipeline context. While the pipeline passes the result of each action to the input of the next, subsequent actions can also retrieve the result of any previous action using this <code>id</code> or <code>result_&lt;x&gt;</code> where <code>&lt;x&gt;</code> is the 0-based index of the action.</p> <p><code>comment</code> A useful description of what this step does for the pipeline.</p> <p><code>args</code> A list of values to pass to the action as positional arguments to a configurable action.</p> <p><code>kwargs</code> A mapping of key-value pairs that are passed to the action to a configurable action.</p>"},{"location":"reference/actions/#metadata-callbacks","title":"Metadata callbacks","text":"<p>Set the value of an argument to <code>save_commit_metadata</code> or <code>save_version_metadata</code>. Those values will be replaced with functions whose keyword arguments are aggregated into the commit or version\u2019s metadata, respectively.</p>"},{"location":"reference/actions/#pipelines","title":"Pipelines","text":"<p>Pipelines are a list of one or more actions. The pipeline may be started with a string, which is passed as an argument to the first action in the pipeline.</p>"},{"location":"reference/actions/#context","title":"Context","text":""},{"location":"reference/actions/file_processing/","title":"File Processing Actions","text":"<p>These actions read and write to file-like objects. </p>"},{"location":"reference/actions/file_processing/#readfile","title":"ReadFile","text":"<p>Read a file\u2019s contents and return them. You can optionally have the file created if it\u2019s missing. If the file is missing or empty, it returns an empty string.</p> <p>This action is unusual in that it doesn\u2019t do anything with input passed to it. This makes it most useful at the beginning of a pipeline.</p>"},{"location":"reference/actions/file_processing/#arguments","title":"Arguments","text":"<ul> <li><code>filename</code>: The full path or path relative to the current working directory.</li> </ul> <ul> <li><code>create_if_missing</code>: Defaults to <code>true</code>. When <code>true</code>, missing files are created.</li> </ul>"},{"location":"reference/actions/file_processing/#examples","title":"Examples","text":"<pre><code>starting_tag_pipeline:\n  - action: ReadFile\n    kwargs:\n      filename: CHANGELOG.md\n</code></pre>"},{"location":"reference/actions/file_processing/#writefile","title":"WriteFile","text":"<p>Write the input string to a file and return the input string.</p> <pre><code>The file must exist and be writable.\n</code></pre>"},{"location":"reference/actions/file_processing/#arguments_1","title":"Arguments","text":"<ul> <li><code>filename</code>: The full path or path relative to the current working directory.</li> </ul>"},{"location":"reference/actions/file_processing/#examples_1","title":"Examples","text":"<pre><code>output_pipeline:\n  - action: WriteFile\n    kwargs:\n      filename: CHANGELOG.md\n</code></pre>"},{"location":"reference/actions/file_processing/#stdout","title":"stdout","text":"<p>Write the input string to <code>stdout</code> and return the input string.</p>"},{"location":"reference/actions/file_processing/#examples_2","title":"Examples","text":"<pre><code>output_pipeline:\n  - action: stdout\n</code></pre> <pre><code>output_pipeline:\n  - action: WriteFile\n    kwargs:\n      filename: CHANGELOG.md\n  - action: stdout\n</code></pre>"},{"location":"reference/actions/file_processing/#incrementalfileinsert","title":"IncrementalFileInsert","text":"<p>Replace the start of a file with the input text.</p> <p>The <code>filename</code> is read and the <code>last_heading_pattern</code> regular expression is used to find the offset of the valid text. All content from the start of the file to that point is replaced with the input text. If the <code>last_heading_pattern</code> is not found, the entire file is replaced.</p> <p>The input text is returned.</p>"},{"location":"reference/actions/file_processing/#arguments_2","title":"Arguments","text":"<ul> <li><code>filename</code>: The full path or path relative to the current working directory.</li> </ul> <ul> <li><code>last_heading_pattern</code>: A regular expression to find valid content. The beginning of the match is used as the offset point.</li> </ul>"},{"location":"reference/actions/file_processing/#examples_3","title":"Examples","text":"<pre><code>output_pipeline:\n  - action: IncrementalFileInsert\n    kwargs:\n      filename: CHANGELOG.md\n      last_heading_pattern: (?im)^## \\d+\\.\\d+(?:\\.\\d+)?\\s+\\([0-9]+-[0-9]{2}-[0-9]{2}\\)$\n</code></pre>"},{"location":"reference/actions/metadata/","title":"Metadata Actions","text":""},{"location":"reference/actions/metadata/#parsetrailers","title":"ParseTrailers","text":""},{"location":"reference/actions/metadata/#arguments","title":"Arguments","text":"<p>commit_metadata</p> <p>In Git, trailers are key-value pairs written inside of commit messages that, make things like issue references programmatically accessible. For example, the following commit message:</p> <pre><code>Awesome new feature\n\nSome details about this commit\n\nCloses: #1234\n</code></pre> <p>The last line is an example for a trailer. It consists of a token (<code>Closes</code>), a separator (<code>:</code>), and a value (<code>#1234</code>).</p> <p>This action will convert the above commit message to:</p> <pre><code>Awesome new feature\n\nSome details about this commit\n</code></pre> <p>And add set <code>metadata.trailers.Closes</code> to <code>#1234</code> for easy reference in the template.</p> <p>More info</p> <p>https://git.wiki.kernel.org/index.php/CommitMessageConventions</p> <p>https://lore.kernel.org/git/60ad75ac7ffca_2ae08208b@natae.notmuch/</p>"},{"location":"reference/actions/shell/","title":"Shell Actions","text":""},{"location":"reference/actions/shell/#bash","title":"bash","text":""},{"location":"reference/actions/shell/#arguments","title":"Arguments","text":"<p>script</p> <p>environment</p>"},{"location":"reference/actions/text_processing/","title":"Text Processing Actions","text":""},{"location":"reference/actions/text_processing/#appendstring","title":"AppendString","text":""},{"location":"reference/actions/text_processing/#arguments","title":"Arguments","text":"<ul> <li>postfix</li> </ul>"},{"location":"reference/actions/text_processing/#firstregexmatch","title":"FirstRegExMatch","text":""},{"location":"reference/actions/text_processing/#arguments_1","title":"Arguments","text":"<ul> <li>named_subgroup</li> <li>default_value</li> <li>pattern</li> <li>ascii_flag</li> <li>ignorecase_flag</li> <li>locale_flag</li> <li>multiline_flag</li> <li>dotall_flag</li> <li>verbose_flag</li> </ul>"},{"location":"reference/actions/text_processing/#firstregexmatchposition","title":"FirstRegExMatchPosition","text":""},{"location":"reference/actions/text_processing/#arguments_2","title":"Arguments","text":"<ul> <li>pattern</li> <li>ascii_flag</li> <li>ignorecase_flag</li> <li>locale_flag</li> <li>multiline_flag</li> <li>dotall_flag</li> <li>verbose_flag</li> </ul>"},{"location":"reference/actions/text_processing/#prefixlines","title":"PrefixLines","text":""},{"location":"reference/actions/text_processing/#arguments_3","title":"Arguments","text":"<ul> <li>prefix</li> <li>first_line</li> </ul>"},{"location":"reference/actions/text_processing/#prefixstring","title":"PrefixString","text":""},{"location":"reference/actions/text_processing/#arguments_4","title":"Arguments:","text":"<ul> <li>prefix</li> </ul>"},{"location":"reference/actions/text_processing/#regexsub","title":"RegexSub","text":""},{"location":"reference/actions/text_processing/#arguments_5","title":"Arguments","text":"<ul> <li>replacement</li> <li>pattern</li> <li>ascii_flag</li> <li>ignorecase_flag</li> <li>locale_flag</li> <li>multiline_flag</li> <li>dotall_flag</li> <li>verbose_flag</li> </ul>"},{"location":"reference/actions/text_processing/#setdefault","title":"SetDefault","text":""},{"location":"reference/actions/text_processing/#arguments_6","title":"Arguments","text":"<ul> <li>default</li> </ul>"},{"location":"reference/actions/text_processing/#slice","title":"Slice","text":""},{"location":"reference/actions/text_processing/#arguments_7","title":"Arguments","text":"<ul> <li>start</li> <li>stop</li> <li>step</li> </ul>"},{"location":"reference/actions/text_processing/#strip","title":"Strip","text":""},{"location":"reference/actions/text_processing/#arguments_8","title":"Arguments","text":"<ul> <li>chars</li> </ul>"},{"location":"reference/actions/text_processing/#wrapparagraphs","title":"WrapParagraphs","text":""},{"location":"reference/actions/text_processing/#arguments_9","title":"Arguments","text":"<ul> <li>paragraph_pattern</li> <li>paragraph_join</li> <li>width</li> </ul>"},{"location":"reference/actions/text_processing/#capitalize","title":"capitalize","text":""},{"location":"reference/actions/text_processing/#prefix_caret","title":"prefix_caret","text":""},{"location":"reference/actions/text_processing/#append_dot","title":"append_dot","text":""},{"location":"reference/actions/text_processing/#noop","title":"noop","text":""},{"location":"reference/actions/text_processing/#strip_spaces","title":"strip_spaces","text":""},{"location":"reference/api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>generate_changelog     * actions         * file_processing         * matching         * metadata         * shell         * text_processing     * cli     * commits     * configuration     * context     * data_merge     * git_ops     * notes     * pipeline     * release_hint     * templating     * utilities</li> </ul>"},{"location":"reference/api/generate_changelog/","title":"Index","text":""},{"location":"reference/api/generate_changelog/cli/","title":"cli","text":"<p>Command line interface for generate_changelog.</p>"},{"location":"reference/api/generate_changelog/cli/#generate_changelog.cli-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/cli/#generate_changelog.cli-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/cli/#generate_changelog.cli-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/cli/#generate_changelog.cli.cli","title":"cli","text":"<pre><code>cli(\n    config: Optional[Path],\n    repo_path: Optional[Path],\n    starting_tag: Optional[str],\n    output: Optional[str],\n    skip_output_pipeline: bool,\n    branch_override: Optional[str],\n) -&gt; None\n</code></pre> <p>Generate a change log from git commits.</p>"},{"location":"reference/api/generate_changelog/cli/#generate_changelog.cli.echo","title":"echo","text":"<pre><code>echo(message: str, quiet: bool = False) -&gt; None\n</code></pre> <p>Display a message to the user.</p> PARAMETER DESCRIPTION <code>message</code> <p>The message to send to the user</p> <p> TYPE: <code>str</code> </p> <code>quiet</code> <p>Do it quietly</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/generate_changelog/cli/#generate_changelog.cli.generate_config_callback","title":"generate_config_callback","text":"<pre><code>generate_config_callback(\n    ctx: Context, param: Parameter, value: bool\n) -&gt; None\n</code></pre> <p>Generate a default configuration file.</p>"},{"location":"reference/api/generate_changelog/cli/#generate_changelog.cli.get_user_config","title":"get_user_config","text":"<pre><code>get_user_config(\n    config_file: Optional[Path], echo_func: Callable\n) -&gt; Configuration\n</code></pre> <p>Get the default configuration and update it with the user\u2019s config file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The path to the user\u2019s configuration file</p> <p> TYPE: <code>Optional[Path]</code> </p> <code>echo_func</code> <p>The function to call to echo output</p> <p> TYPE: <code>Callable</code> </p> RETURNS DESCRIPTION <code>Configuration</code> <p>The configuration object</p>"},{"location":"reference/api/generate_changelog/commits/","title":"commits","text":"<p>Filter and process commits into contexts.</p>"},{"location":"reference/api/generate_changelog/commits/#generate_changelog.commits-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/commits/#generate_changelog.commits-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/commits/#generate_changelog.commits.create_version_context","title":"create_version_context","text":"<pre><code>create_version_context(\n    config: Configuration, tag: GitTag\n) -&gt; VersionContext\n</code></pre> <p>Generate a :class:<code>VersionContext</code> from a tag dictionary.</p> PARAMETER DESCRIPTION <code>config</code> <p>The current configuration object.</p> <p> TYPE: <code>Configuration</code> </p> <code>tag</code> <p>A GitTag used as the basis for a VersionContext</p> <p> TYPE: <code>GitTag</code> </p> RETURNS DESCRIPTION <code>VersionContext</code> <p>The finished version context.</p>"},{"location":"reference/api/generate_changelog/commits/#generate_changelog.commits.first_matching","title":"first_matching","text":"<pre><code>first_matching(\n    actions: list, commit: CommitContext\n) -&gt; Optional[str]\n</code></pre> <p>Return the first section that matches the given commit summary.</p> PARAMETER DESCRIPTION <code>actions</code> <p>A mapping of section names to a list of regular expressions for matching.</p> <p> TYPE: <code>list</code> </p> <code>commit</code> <p>The commit context to evaluate</p> <p> TYPE: <code>CommitContext</code> </p> RETURNS DESCRIPTION <code>Optional[str]</code> <p>The name of the section.</p>"},{"location":"reference/api/generate_changelog/commits/#generate_changelog.commits.generate_commit_context","title":"generate_commit_context","text":"<pre><code>generate_commit_context(\n    commit: Commit,\n    config: Configuration,\n    version_metadata_func: Optional[Callable],\n) -&gt; CommitContext\n</code></pre> <p>Create the renderable context for this commit.</p> <p>The summary and body are processed through their pipelines, and a category is assigned.</p> PARAMETER DESCRIPTION <code>commit</code> <p>The original commit data</p> <p> TYPE: <code>Commit</code> </p> <code>config</code> <p>The configuration to use</p> <p> TYPE: <code>Configuration</code> </p> <code>version_metadata_func</code> <p>An optional callable to set version metadata while processing</p> <p> TYPE: <code>Optional[Callable]</code> </p> RETURNS DESCRIPTION <code>CommitContext</code> <p>The render-able commit context</p>"},{"location":"reference/api/generate_changelog/commits/#generate_changelog.commits.get_context_from_tags","title":"get_context_from_tags","text":"<pre><code>get_context_from_tags(\n    repository: Repo,\n    config: Configuration,\n    starting_tag: Optional[str] = None,\n) -&gt; List[VersionContext]\n</code></pre> <p>Generate the template context from git tags.</p> PARAMETER DESCRIPTION <code>repository</code> <p>The git repository to evaluate.</p> <p> TYPE: <code>Repo</code> </p> <code>config</code> <p>The current configuration object.</p> <p> TYPE: <code>Configuration</code> </p> <code>starting_tag</code> <p>Optional starting tag for generating incremental changelogs.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[VersionContext]</code> <p>A list of VersionContext objects.</p>"},{"location":"reference/api/generate_changelog/commits/#generate_changelog.commits.sort_group_commits","title":"sort_group_commits","text":"<pre><code>sort_group_commits(commit_groups: dict) -&gt; list\n</code></pre> <p>Sort the commit groups and convert the <code>dict</code> into a list of <code>GroupedCommit</code> objects.</p> PARAMETER DESCRIPTION <code>commit_groups</code> <p>A dict where the keys are grouping values.</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>list</code> <p>A list</p>"},{"location":"reference/api/generate_changelog/configuration/","title":"configuration","text":"<p>Configuration management for generate_changelog.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.DEFAULT_CONFIG_FILE_NAME","title":"DEFAULT_CONFIG_FILE_NAME  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONFIG_FILE_NAME = '.changelog-config'\n</code></pre> <p>Base default configuration file name</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.DEFAULT_CONFIG_FILE_NAMES","title":"DEFAULT_CONFIG_FILE_NAMES  <code>module-attribute</code>","text":"<pre><code>DEFAULT_CONFIG_FILE_NAMES = [\n    f\"{DEFAULT_CONFIG_FILE_NAME}.yaml\",\n    f\"{DEFAULT_CONFIG_FILE_NAME}.yml\",\n    DEFAULT_CONFIG_FILE_NAME,\n]\n</code></pre> <p>Valid permutations of the default configuration file name.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.IntOrCallable","title":"IntOrCallable  <code>module-attribute</code>","text":"<pre><code>IntOrCallable: TypeAlias = Union[int, Callable[[], int]]\n</code></pre> <p>The type should be either an int or a callable that returns an int.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.RELEASE_TYPE_ORDER","title":"RELEASE_TYPE_ORDER  <code>module-attribute</code>","text":"<pre><code>RELEASE_TYPE_ORDER = (\n    None,\n    \"no-release\",\n    \"alpha\",\n    \"beta\",\n    \"dev\",\n    \"pre-release\",\n    \"release-candidate\",\n    \"patch\",\n    \"minor\",\n    \"major\",\n)\n</code></pre> <p>The sort order of the release types.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.StrOrCallable","title":"StrOrCallable  <code>module-attribute</code>","text":"<pre><code>StrOrCallable: TypeAlias = Union[str, Callable[[], str]]\n</code></pre> <p>The type should be either a string or a callable that returns a string.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration._CONFIG","title":"_CONFIG  <code>module-attribute</code>","text":"<pre><code>_CONFIG: Configuration = get_default_config()\n</code></pre> <p>The global running configuration.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration","title":"Configuration  <code>dataclass</code>","text":"<pre><code>Configuration(\n    variables: dict = dict(),\n    starting_tag_pipeline: Optional[list] = list(),\n    unreleased_label: str = \"Unreleased\",\n    summary_pipeline: list = list(),\n    body_pipeline: list = list(),\n    output_pipeline: list = list(),\n    template_dirs: list = list(),\n    group_by: list = list(),\n    tag_pattern: str = \"^[0-9]+\\\\.[0-9]+(?:\\\\.[0-9]+)?$\",\n    include_merges: bool = False,\n    ignore_patterns: list = list(),\n    commit_classifiers: list = list(),\n    valid_author_tokens: list = list(),\n    release_hint_rules: list = list(),\n)\n</code></pre> <p>Configuration options for generate-changelog.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.body_pipeline","title":"body_pipeline  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body_pipeline: list = field(default_factory=list)\n</code></pre> <p>Process the commit\u2019s body for use in the changelog.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.commit_classifiers","title":"commit_classifiers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commit_classifiers: list = field(default_factory=list)\n</code></pre> <p>Set the commit\u2019s category metadata to the first classifier that returns <code>True</code>.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.group_by","title":"group_by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_by: list = field(default_factory=list)\n</code></pre> <p>Group the commits within a version by these commit attributes.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.ignore_patterns","title":"ignore_patterns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ignore_patterns: list = field(default_factory=list)\n</code></pre> <p>Ignore commits whose summary line matches any of these regular expression patterns.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.include_merges","title":"include_merges  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_merges: bool = False\n</code></pre> <p>Tells <code>git-log</code> whether to include merge commits in the log.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.output_pipeline","title":"output_pipeline  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_pipeline: list = field(default_factory=list)\n</code></pre> <p>Process and store the full or partial changelog.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.release_hint_rules","title":"release_hint_rules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>release_hint_rules: list = field(default_factory=list)\n</code></pre> <p>Rules applied to commits to determine the type of release to suggest.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.starting_tag_pipeline","title":"starting_tag_pipeline  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>starting_tag_pipeline: Optional[list] = field(\n    default_factory=list\n)\n</code></pre> <p>Pipeline to find the most recent tag for incremental changelog generation. Leave empty to always start at first commit.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.summary_pipeline","title":"summary_pipeline  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary_pipeline: list = field(default_factory=list)\n</code></pre> <p>Process the commit\u2019s first line for use in the changelog.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.tag_pattern","title":"tag_pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag_pattern: str = '^[0-9]+\\\\.[0-9]+(?:\\\\.[0-9]+)?$'\n</code></pre> <p>Only tags matching this regular expression are used for the changelog.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.template_dirs","title":"template_dirs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>template_dirs: list = field(default_factory=list)\n</code></pre> <p>Full or relative paths to look for output generation templates.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.unreleased_label","title":"unreleased_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unreleased_label: str = 'Unreleased'\n</code></pre> <p>Used as the version title of the changes since the last valid tag.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.valid_author_tokens","title":"valid_author_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>valid_author_tokens: list = field(default_factory=list)\n</code></pre> <p>Tokens in git commit trailers that indicate authorship.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: dict = field(default_factory=dict)\n</code></pre> <p>User variables for reference in other parts of the configuration.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.rendered_variables","title":"rendered_variables","text":"<pre><code>rendered_variables() -&gt; dict\n</code></pre> <p>Render each variable value using the previous variables as the context.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.Configuration.update_from_file","title":"update_from_file","text":"<pre><code>update_from_file(filename: Path) -&gt; None\n</code></pre> <p>Updates this configuration instance in place from a YAML file.</p> PARAMETER DESCRIPTION <code>filename</code> <p>Path to the YAML file</p> <p> TYPE: <code>Path</code> </p> RAISES DESCRIPTION <code>UsageError</code> <p>if the path does not exist or is a directory</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.get_config","title":"get_config","text":"<pre><code>get_config() -&gt; Configuration\n</code></pre> <p>Return the current configuration.</p> <p>If the configuration has never been initialized, it is instantiated with the defaults.</p> RETURNS DESCRIPTION <code>Configuration</code> <p>The global configuration object.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.get_default_config","title":"get_default_config","text":"<pre><code>get_default_config() -&gt; Configuration\n</code></pre> <p>Create a new class:<code>Configuration</code> object with default values.</p> RETURNS DESCRIPTION <code>Configuration</code> <p>A new Configuration object</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.set_config","title":"set_config","text":"<pre><code>set_config(key: str, value: Any) -&gt; Configuration\n</code></pre> <p>Set a configuration key to a value.</p>"},{"location":"reference/api/generate_changelog/configuration/#generate_changelog.configuration.write_default_config","title":"write_default_config","text":"<pre><code>write_default_config(filename: Path) -&gt; None\n</code></pre> <p>Write a default configuration file to the specified path.</p> PARAMETER DESCRIPTION <code>filename</code> <p>Path to write to</p> <p> TYPE: <code>Path</code> </p>"},{"location":"reference/api/generate_changelog/context/","title":"context","text":"<p>Context definitions used in templates.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext","title":"ChangelogContext  <code>dataclass</code>","text":"<pre><code>ChangelogContext(\n    config: Configuration,\n    versions: List[VersionContext] = list(),\n)\n</code></pre> <p>The primary context used when rendering a changelog.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config: Configuration\n</code></pre> <p>The changelog generation configuration.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext.group_by","title":"group_by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_by: List[str] = field(\n    init=False, default_factory=list\n)\n</code></pre> <p>The configured grouping aspects for commits within a version.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext.group_depth","title":"group_depth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_depth: int = field(init=False)\n</code></pre> <p>The number of levels version commits are grouped by.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext.unreleased_label","title":"unreleased_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unreleased_label: str = field(init=False)\n</code></pre> <p>The configured label used as the version title of the changes since the last valid tag.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext.valid_author_tokens","title":"valid_author_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>valid_author_tokens: List[str] = field(\n    init=False, default_factory=list\n)\n</code></pre> <p>The configured tokens in git commit trailers that indicate authorship.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext.versions","title":"versions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>versions: List[VersionContext] = field(default_factory=list)\n</code></pre> <p>The version contexts to render in the changelog.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.ChangelogContext.as_dict","title":"as_dict","text":"<pre><code>as_dict() -&gt; dict\n</code></pre> <p>Safely generate a dict version of this object.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext","title":"CommitContext  <code>dataclass</code>","text":"<pre><code>CommitContext(\n    sha: str,\n    commit_datetime: datetime.datetime,\n    summary: str,\n    body: str,\n    committer: str,\n    grouping: tuple = tuple(),\n    metadata: dict = dict(),\n    files: set = set(),\n)\n</code></pre> <p>Commit information for the template context.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.author_names","title":"author_names  <code>property</code>","text":"<pre><code>author_names: list\n</code></pre> <p>A list of the authors\u2019 names.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.authors","title":"authors  <code>property</code>","text":"<pre><code>authors: list\n</code></pre> <p>A list of authors\u2019 names and emails.</p> RETURNS DESCRIPTION <code>list</code> <p>A list of dictionaries with name and email keys.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: str\n</code></pre> <p>The commit message sans the first line.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.commit_datetime","title":"commit_datetime  <code>instance-attribute</code>","text":"<pre><code>commit_datetime: datetime\n</code></pre> <p>The date and time of the commit with timezone offset.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.committer","title":"committer  <code>instance-attribute</code>","text":"<pre><code>committer: str\n</code></pre> <p>The name and email of the committer as <code>name &lt;email@ex.com&gt;</code>.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.files","title":"files  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>files: set = field(default_factory=set)\n</code></pre> <p>The file paths (relative to the repository root) modified by this commit.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.grouping","title":"grouping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>grouping: tuple = field(default_factory=tuple)\n</code></pre> <p>The values to group this commit based on the <code>group_by</code> configuration.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict = field(default_factory=dict)\n</code></pre> <p>Metadata for this commit parsed from the commit message.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.sha","title":"sha  <code>instance-attribute</code>","text":"<pre><code>sha: str\n</code></pre> <p>The full hex SHA of the commit.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.short_sha","title":"short_sha  <code>property</code>","text":"<pre><code>short_sha: str\n</code></pre> <p>The first seven characters of the hex sha.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.summary","title":"summary  <code>instance-attribute</code>","text":"<pre><code>summary: str\n</code></pre> <p>The first line of the commit message.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.CommitContext.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> <p>Set the cached author information to None.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.GroupingContext","title":"GroupingContext  <code>dataclass</code>","text":"<pre><code>GroupingContext(\n    grouping: Tuple[str, ...], commits: List[CommitContext]\n)\n</code></pre> <p>A combination of a tuple of the sorted values and a list of the CommitContexts in that group.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext","title":"VersionContext  <code>dataclass</code>","text":"<pre><code>VersionContext(\n    label: str,\n    date_time: Optional[datetime.datetime] = None,\n    tag: Optional[str] = None,\n    previous_tag: Optional[str] = None,\n    tagger: Optional[str] = None,\n    grouped_commits: List[GroupingContext] = list(),\n    metadata: dict = dict(),\n)\n</code></pre> <p>Version information for the template context.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext.date_time","title":"date_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date_time: Optional[datetime] = None\n</code></pre> <p>The date and time with timezone offset the version was tagged.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext.grouped_commits","title":"grouped_commits  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>grouped_commits: List[GroupingContext] = field(\n    default_factory=list\n)\n</code></pre> <p>The sections that group the commits in this version.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext.label","title":"label  <code>instance-attribute</code>","text":"<pre><code>label: str\n</code></pre> <p>The version label.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: dict = field(default_factory=dict)\n</code></pre> <p>Metadata for this version parsed from commits.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext.previous_tag","title":"previous_tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>previous_tag: Optional[str] = None\n</code></pre> <p>The previous tag.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext.tag","title":"tag  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tag: Optional[str] = None\n</code></pre> <p>The tag.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context.VersionContext.tagger","title":"tagger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tagger: Optional[str] = None\n</code></pre> <p>The name and email of the person who tagged this version in <code>name &lt;email@ex.com&gt;</code> format.</p>"},{"location":"reference/api/generate_changelog/context/#generate_changelog.context-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/data_merge/","title":"data_merge","text":"<p>Tools for merging data.</p>"},{"location":"reference/api/generate_changelog/data_merge/#generate_changelog.data_merge-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/data_merge/#generate_changelog.data_merge.comprehensive_merge","title":"comprehensive_merge","text":"<pre><code>comprehensive_merge(*args: Any) -&gt; Any\n</code></pre> <p>Merges data comprehensively.</p> <p>All arguments must be of the same type.</p> <ul> <li>Scalars are overwritten by the new values</li> <li>lists are merged and de-duplicated</li> <li>dicts are recursively merged</li> </ul> PARAMETER DESCRIPTION <code>*args</code> <p>Dicts to merge with the first one the base</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The merged data</p>"},{"location":"reference/api/generate_changelog/data_merge/#generate_changelog.data_merge.deep_merge","title":"deep_merge","text":"<pre><code>deep_merge(*dicts: dict) -&gt; dict\n</code></pre> <p>Merges dicts deeply.</p> <p>Pass the dictionaries to merge as parameters to the function.</p> PARAMETER DESCRIPTION <code>*dicts</code> <p>Dicts to merge with the first one as the base</p> <p> TYPE: <code>dict</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The merged dict</p> <p> TYPE: <code>dict</code> </p>"},{"location":"reference/api/generate_changelog/data_merge/#generate_changelog.data_merge.merge_iterables","title":"merge_iterables","text":"<pre><code>merge_iterables(iter1: Iterable, iter2: Iterable) -&gt; set\n</code></pre> <p>Merge and de-duplicate a bunch of lists into a single list.</p> <p>Order is not guaranteed.</p> PARAMETER DESCRIPTION <code>iter1</code> <p>An Iterable</p> <p> TYPE: <code>Iterable</code> </p> <code>iter2</code> <p>An Iterable</p> <p> TYPE: <code>Iterable</code> </p> RETURNS DESCRIPTION <code>set</code> <p>The merged, de-duplicated sequence as a set</p>"},{"location":"reference/api/generate_changelog/git_ops/","title":"git_ops","text":"<p>git information access.</p>"},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.GitTag","title":"GitTag  <code>dataclass</code>","text":"<pre><code>GitTag(\n    tag_name: str, tag_info: TagInfo, commits: List[Commit]\n)\n</code></pre> <p>Represents a Git tag and its associated data.</p> <p>This class is used to encapsulate details about a Git tag, including its name, additional information, and a list of related commits. It is immutable to ensure the integrity of the stored data, making it safe for concurrent and controlled usage.</p> ATTRIBUTE DESCRIPTION <code>tag_name</code> <p>The name of the Git tag.</p> <p> TYPE: <code>str</code> </p> <code>tag_info</code> <p>Metadata and additional details associated with the Git tag.</p> <p> TYPE: <code>TagInfo</code> </p> <code>commits</code> <p>The list of commits that are associated with this Git tag.</p> <p> TYPE: <code>List[Commit]</code> </p>"},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.TagInfo","title":"TagInfo  <code>dataclass</code>","text":"<pre><code>TagInfo(\n    name: str,\n    commit: str,\n    tagger: Union[str, Actor],\n    tagged_datetime: datetime.datetime,\n)\n</code></pre> <p>Simple storage of tag information.</p>"},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.TagInfo-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.TagInfo.date_string","title":"date_string  <code>property</code>","text":"<pre><code>date_string: str\n</code></pre> <p>Convenience method to return an ISO8601 date string.</p>"},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.get_commits_by_tags","title":"get_commits_by_tags","text":"<pre><code>get_commits_by_tags(\n    repository: Repo,\n    tag_filter_pattern: str,\n    starting_tag: Optional[str] = None,\n) -&gt; List[GitTag]\n</code></pre> <p>Group commits by the tags they belong to.</p> PARAMETER DESCRIPTION <code>repository</code> <p>The git repository object</p> <p> TYPE: <code>Repo</code> </p> <code>tag_filter_pattern</code> <p>A regular expression pattern that matches valid tags as versions</p> <p> TYPE: <code>str</code> </p> <code>starting_tag</code> <p>Only include tags after this one</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[GitTag]</code> <p>A list of dictionaries with tag information with most recent first</p>"},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.get_repo","title":"get_repo","text":"<pre><code>get_repo(repo_path: Optional[str] = None) -&gt; Repo\n</code></pre> <p>Get the git repo from a specific path or the current working directory.</p> PARAMETER DESCRIPTION <code>repo_path</code> <p>The path to the directory with git repository. If None, the current working directory is used.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Repo</code> <p>Repository object</p>"},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.get_tags","title":"get_tags","text":"<pre><code>get_tags(repository: Repo) -&gt; List[TagInfo]\n</code></pre> <p>Get all the tags in a repository.</p> PARAMETER DESCRIPTION <code>repository</code> <p>The repository object containing the tags</p> <p> TYPE: <code>Repo</code> </p> RETURNS DESCRIPTION <code>List[TagInfo]</code> <p>A list of TagInfo objects with the most recent first</p>"},{"location":"reference/api/generate_changelog/git_ops/#generate_changelog.git_ops.parse_commits","title":"parse_commits","text":"<pre><code>parse_commits(\n    repository: Repo,\n    starting_rev: Optional[str] = None,\n    ending_rev: Optional[str] = None,\n) -&gt; list\n</code></pre> <p>Parse the commits for later processing.</p> PARAMETER DESCRIPTION <code>repository</code> <p>The repository object.</p> <p> TYPE: <code>Repo</code> </p> <code>starting_rev</code> <p>Include all commits after this revision.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ending_rev</code> <p>include all commmits before and including this revision.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list</code> <p>A list of CommitInfo objects.</p>"},{"location":"reference/api/generate_changelog/notes/","title":"notes","text":"<p>Parse the changelog and return the release notes.</p>"},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes.MissingConfigurationError","title":"MissingConfigurationError","text":"<p>               Bases: <code>Exception</code></p> <p>An optional part of the configuration is missing for this operation.</p>"},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes.get_changelog_path","title":"get_changelog_path","text":"<pre><code>get_changelog_path() -&gt; Path\n</code></pre> <p>Return the path to the changelog.</p> RAISES DESCRIPTION <code>MissingConfigurationError</code> <p>If the <code>starting_tag_pipeline</code> configuration is missing or incorrect.</p> RETURNS DESCRIPTION <code>Path</code> <p>The path to the changelog.</p>"},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes.get_section_pattern","title":"get_section_pattern","text":"<pre><code>get_section_pattern() -&gt; str\n</code></pre> <p>Get the version section pattern for the changelog.</p> RAISES DESCRIPTION <code>MissingConfigurationError</code> <p>If the <code>starting_tag_pipeline</code> configuration is missing or incorrect.</p> RETURNS DESCRIPTION <code>str</code> <p>The version section pattern.</p>"},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes.get_version_notes","title":"get_version_notes","text":"<pre><code>get_version_notes(version: str) -&gt; str\n</code></pre> <p>Parse the changelog.md file and return the notes for the given version.</p>"},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes.pairs","title":"pairs","text":"<pre><code>pairs(iterable: Iterable) -&gt; Iterator[Tuple[Any, Any]]\n</code></pre> <p>Return successive non-overlapping pairs taken from the input iterable.</p> Example <p>list(pairs(\u2018ABCDEFG\u2019)) [(\u2018A\u2019, \u2018B\u2019), (\u2018C\u2019, \u2018D\u2019), (\u2018E\u2019, \u2018F\u2019), (\u2018G\u2019, None)]</p> PARAMETER DESCRIPTION <code>iterable</code> <p>The iterable to split into pairs</p> <p> TYPE: <code>Iterable</code> </p> RETURNS DESCRIPTION <code>Iterator[Tuple[Any, Any]]</code> <p>An iterator of 2-tuples.</p>"},{"location":"reference/api/generate_changelog/notes/#generate_changelog.notes.split_changelog","title":"split_changelog","text":"<pre><code>split_changelog(\n    contents: str, section_pattern: Optional[str] = None\n) -&gt; List[Tuple[str, str]]\n</code></pre> <p>Read the changelog and split it into version and note sections.</p> PARAMETER DESCRIPTION <code>contents</code> <p>The contents of the changelog.</p> <p> TYPE: <code>str</code> </p> <code>section_pattern</code> <p>A regex pattern to split the changelog into sections. If <code>None</code>, the pattern is derived from the <code>starting_tag_pipeline</code> configuration option.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>List[Tuple[str, str]]</code> <p>A list of version and note sections.</p>"},{"location":"reference/api/generate_changelog/pipeline/","title":"pipeline","text":"<p>Simple pipeline workflow processing.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action","title":"Action","text":"<pre><code>Action(\n    action: str,\n    id_: Optional[str] = None,\n    args: Optional[list] = None,\n    kwargs: Optional[dict] = None,\n    commit_metadata_func: Optional[Callable] = None,\n    version_metadata_func: Optional[Callable] = None,\n)\n</code></pre> <p>An action to perform in a pipeline.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action._action_str","title":"_action_str  <code>instance-attribute</code>","text":"<pre><code>_action_str: str = action\n</code></pre> <p>A python path to a function or name of a built-in action.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action._args","title":"_args  <code>instance-attribute</code>","text":"<pre><code>_args: list = args or []\n</code></pre> <p>Arguments to instantiate the action.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action._kwargs","title":"_kwargs  <code>instance-attribute</code>","text":"<pre><code>_kwargs: dict = kwargs or {}\n</code></pre> <p>Keyword arguments to instantiate the action.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action.commit_metadata_func","title":"commit_metadata_func  <code>instance-attribute</code>","text":"<pre><code>commit_metadata_func: Optional[Callable] = (\n    commit_metadata_func or noop_func\n)\n</code></pre> <p>Function the action can call to set metadata about the commit.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: Optional[str] = id_\n</code></pre> <p>Identifier for the action.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action.version_metadata_func","title":"version_metadata_func  <code>instance-attribute</code>","text":"<pre><code>version_metadata_func: Optional[Callable] = (\n    version_metadata_func or noop_func\n)\n</code></pre> <p>Function the action can call to set metadata about the version a commit belongs to.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Action.run","title":"run","text":"<pre><code>run(context: dict, input_value: Any) -&gt; str\n</code></pre> <p>Perform the action on the input.</p> PARAMETER DESCRIPTION <code>context</code> <p>The current pipeline context for rendering <code>args</code> and <code>kwargs</code></p> <p> TYPE: <code>dict</code> </p> <code>input_value</code> <p>The value to processes</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The processed string</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Pipeline","title":"Pipeline","text":"<pre><code>Pipeline(actions: Union[list, tuple], **kwargs)\n</code></pre> <p>A collection of actions to perform on an input.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Pipeline-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Pipeline.actions","title":"actions  <code>instance-attribute</code>","text":"<pre><code>actions: tuple = tuple(actions)\n</code></pre> <p>The actions to perform on the input.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Pipeline.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context: dict = copy()\n</code></pre> <p>The current state of the pipeline initialized by keyword arguments.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Pipeline-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.Pipeline.run","title":"run","text":"<pre><code>run(input_value: Optional[str] = None) -&gt; str\n</code></pre> <p>Run the pipeline using <code>input_value</code> as the starting point.</p> PARAMETER DESCRIPTION <code>input_value</code> <p>An optional string value to start the pipeline.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The processed result of the pipeline.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.import_function","title":"import_function","text":"<pre><code>import_function(function_path: str) -&gt; Callable\n</code></pre> <p>Import a function from a dotted path.</p> Example <p>import_function(\u201cgenerate_changelog.pipeline.noop_func\u201d)  PARAMETER DESCRIPTION <code>function_path</code> <p>A dotted path to a function</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>The callable function</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.noop_func","title":"noop_func","text":"<pre><code>noop_func(**kwargs) -&gt; None\n</code></pre> <p>A function that does nothing when called.</p>"},{"location":"reference/api/generate_changelog/pipeline/#generate_changelog.pipeline.pipeline_factory","title":"pipeline_factory","text":"<pre><code>pipeline_factory(\n    action_list: list,\n    commit_metadata_func: Optional[Callable] = None,\n    version_metadata_func: Optional[Callable] = None,\n    **kwargs: Any\n) -&gt; Pipeline\n</code></pre> <p>Create a class:<code>~Pipeline</code> from a list of actions specified by dictionaries.</p> PARAMETER DESCRIPTION <code>action_list</code> <p>A <code>list</code> of <code>dict</code> s that specify class:<code>~Action</code> attributes</p> <p> TYPE: <code>list</code> </p> <code>commit_metadata_func</code> <p>Optional callable that actions can use to set commit metadata</p> <p> TYPE: <code>Optional[Callable]</code> DEFAULT: <code>None</code> </p> <code>version_metadata_func</code> <p>Optional callable that actions can use to set version metadata</p> <p> TYPE: <code>Optional[Callable]</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>keyword arguments to pass to the class:<code>~Pipeline</code> constructor</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Pipeline</code> <p>The instantiated Pipeline</p>"},{"location":"reference/api/generate_changelog/release_hint/","title":"release_hint","text":"<p>Methods for generating a release hint.</p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.InvalidRuleError","title":"InvalidRuleError","text":"<p>               Bases: <code>Exception</code></p> <p>The evaluated rule is invalid.</p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.ReleaseRule","title":"ReleaseRule","text":"<pre><code>ReleaseRule(\n    match_result: Optional[str],\n    no_match_result: Optional[str] = \"no-release\",\n    grouping: Union[str, tuple, list, None] = None,\n    path: Optional[Union[str, Sequence[str]]] = None,\n    branch: Optional[str] = None,\n)\n</code></pre> <p>A commit evaluation rule for hinting at the level of change.</p> PARAMETER DESCRIPTION <code>match_result</code> <p>Release type if a commit context matches the rule.</p> <p> TYPE: <code>Optional[str]</code> </p> <code>no_match_result</code> <p>Release type if a commit context doesn\u2019t match the rule.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>'no-release'</code> </p> <code>grouping</code> <p>The partial or exact grouping of the commit context</p> <p> TYPE: <code>Union[str, tuple, list, None]</code> DEFAULT: <code>None</code> </p> <code>path</code> <p>A globbing pattern that matches against files included in the commit</p> <p> TYPE: <code>Optional[Union[str, Sequence[str]]]</code> DEFAULT: <code>None</code> </p> <code>branch</code> <p>A regular expression pattern to match against the branch</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.ReleaseRule-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.ReleaseRule.__call__","title":"__call__","text":"<pre><code>__call__(\n    commit: CommitContext, current_branch: str\n) -&gt; Optional[str]\n</code></pre> <p>Evaluate the commit using this rule.</p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.ReleaseRule.matches_branch","title":"matches_branch","text":"<pre><code>matches_branch(current_branch: str) -&gt; bool\n</code></pre> <p>Does the current branch match the rule?</p> PARAMETER DESCRIPTION <code>current_branch</code> <p>The name of the current branch</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if the current branch matches or if <code>self.branch</code> is <code>None</code></p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.ReleaseRule.matches_grouping","title":"matches_grouping","text":"<pre><code>matches_grouping(commit: CommitContext) -&gt; bool\n</code></pre> <p>Does the commit grouping match the rule?</p> <ul> <li>If <code>self.grouping</code> is a string, it checks if the string is in the commit\u2019s <code>grouping</code>.</li> </ul> <ul> <li>If <code>self.grouping</code> is a list or tuple of strings, it must match the commit\u2019s <code>grouping</code>.</li> </ul> <ul> <li>If <code>self.grouping</code> is a list or tuple of strings and the last item in the list is a \u201c*\u201d,   it must match the beginning of the commit\u2019s <code>grouping</code>.</li> </ul> <ul> <li>If <code>self.grouping</code> is None, it will return a match</li> </ul> PARAMETER DESCRIPTION <code>commit</code> <p>The commit context whose grouping should match</p> <p> TYPE: <code>CommitContext</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if the grouping matches</p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.ReleaseRule.matches_path","title":"matches_path","text":"<pre><code>matches_path(commit: CommitContext) -&gt; bool\n</code></pre> <p>Do any of the paths in the commit match the rule?</p> PARAMETER DESCRIPTION <code>commit</code> <p>The commit context whose files should match</p> <p> TYPE: <code>CommitContext</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if any file in the commit context matches the pattern or if <code>self.path</code> is <code>None</code></p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.RuleProcessor","title":"RuleProcessor","text":"<pre><code>RuleProcessor(rule_list: List[dict])\n</code></pre> <p>Process a commit through all the rules and return the suggestion.</p> PARAMETER DESCRIPTION <code>rule_list</code> <p>The list of dictionaries representing release rules</p> <p> TYPE: <code>List[dict]</code> </p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.RuleProcessor-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.RuleProcessor.__call__","title":"__call__","text":"<pre><code>__call__(\n    commit: CommitContext, current_branch: str\n) -&gt; Optional[str]\n</code></pre> <p>Return the result of applying all the rules to a commit.</p> PARAMETER DESCRIPTION <code>commit</code> <p>The commit context to apply rules to</p> <p> TYPE: <code>CommitContext</code> </p> <code>current_branch</code> <p>The name of the current branch</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Optional[str]</code> <p>The release hint</p>"},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/release_hint/#generate_changelog.release_hint.suggest_release_type","title":"suggest_release_type","text":"<pre><code>suggest_release_type(\n    current_branch: str,\n    version_contexts: List[VersionContext],\n    config: Configuration,\n) -&gt; str\n</code></pre> <p>Suggest the type of release based on the unreleased commits.</p> PARAMETER DESCRIPTION <code>current_branch</code> <p>The name of the current branch</p> <p> TYPE: <code>str</code> </p> <code>version_contexts</code> <p>The processed commits to process</p> <p> TYPE: <code>List[VersionContext]</code> </p> <code>config</code> <p>The current configuration</p> <p> TYPE: <code>Configuration</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The type of release based on the rules, or <code>no-release</code></p>"},{"location":"reference/api/generate_changelog/templating/","title":"templating","text":"<p>Templating functions.</p>"},{"location":"reference/api/generate_changelog/templating/#generate_changelog.templating-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/templating/#generate_changelog.templating.RenderedChangelog","title":"RenderedChangelog  <code>dataclass</code>","text":"<pre><code>RenderedChangelog(\n    heading: Optional[str] = None,\n    notes: Optional[str] = None,\n    full: Optional[str] = None,\n)\n</code></pre> <p>The output of rendering a changelog.</p> <p>If it is an incremental changelog, <code>full</code> contains <code>{heading}\\n{notes}</code></p> <p>If it is a full changelog, <code>heading</code> and <code>notes</code> are empty.</p>"},{"location":"reference/api/generate_changelog/templating/#generate_changelog.templating-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/templating/#generate_changelog.templating.get_default_env","title":"get_default_env","text":"<pre><code>get_default_env(\n    config: Optional[Configuration] = None,\n) -&gt; Environment\n</code></pre> <p>The default Jinja environment for rendering a changelog.</p>"},{"location":"reference/api/generate_changelog/templating/#generate_changelog.templating.get_pipeline_env","title":"get_pipeline_env","text":"<pre><code>get_pipeline_env(\n    config: Optional[Configuration] = None,\n) -&gt; Environment\n</code></pre> <p>The Jinja environment for rendering actions and pipelines.</p>"},{"location":"reference/api/generate_changelog/templating/#generate_changelog.templating.render_changelog","title":"render_changelog","text":"<pre><code>render_changelog(\n    version_context: List[VersionContext],\n    config: Configuration,\n    incremental: bool = False,\n) -&gt; RenderedChangelog\n</code></pre> <p>Render the full or incremental changelog for the repository to a string.</p> PARAMETER DESCRIPTION <code>version_context</code> <p>The processed commits</p> <p> TYPE: <code>List[VersionContext]</code> </p> <code>config</code> <p>The current configuration object.</p> <p> TYPE: <code>Configuration</code> </p> <code>incremental</code> <p><code>True</code> to generate an incremental changelog. <code>False</code> to render the entire thing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>RenderedChangelog</code> <p>The full or partial changelog</p>"},{"location":"reference/api/generate_changelog/utilities/","title":"utilities","text":"<p>Utility methods.</p>"},{"location":"reference/api/generate_changelog/utilities/#generate_changelog.utilities-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/utilities/#generate_changelog.utilities.diff_index","title":"diff_index","text":"<pre><code>diff_index(\n    iterable1: Iterable, iterable2: Iterable\n) -&gt; Optional[int]\n</code></pre> <p>Return the index where iterable2 is different from iterable1.</p>"},{"location":"reference/api/generate_changelog/utilities/#generate_changelog.utilities.eval_if_callable","title":"eval_if_callable","text":"<pre><code>eval_if_callable(value: Any) -&gt; Any\n</code></pre> <p>Tries to evaluate <code>value</code> as an action, a pipeline, or a callable if possible.</p> PARAMETER DESCRIPTION <code>value</code> <p>A callable, action dictionary, list of action dictionaries, or other.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The original value if it can not be evaluated further.</p>"},{"location":"reference/api/generate_changelog/utilities/#generate_changelog.utilities.is_action","title":"is_action","text":"<pre><code>is_action(value: Any) -&gt; bool\n</code></pre> <p>Returns <code>True</code> if the value is an action.</p>"},{"location":"reference/api/generate_changelog/utilities/#generate_changelog.utilities.is_pipeline","title":"is_pipeline","text":"<pre><code>is_pipeline(value: Any) -&gt; bool\n</code></pre> <p>Returns <code>True</code> if the value is a pipeline.</p>"},{"location":"reference/api/generate_changelog/utilities/#generate_changelog.utilities.pairs","title":"pairs","text":"<pre><code>pairs(iterable: Iterable) -&gt; Iterable\n</code></pre> <p>Return successive pairs taken from the input iterable.</p> <p>Like func:<code>itertools.pairwise</code> in 3.10, but will always include the last element by itself.</p> Example <p>list(pairs(\u201cABCD\u201d)) [(\u201cA\u201d, \u201cB\u201d), (\u201cB\u201d, \u201cC\u201d), (\u201cC\u201d, \u201cD\u201d), (\u201cD\u201d, None)] list(pairs(\u201cABC\u201d)) [(\u201cA\u201d, \u201cB\u201d), (\u201cB\u201d, \u201cC\u201d), (\u201cC\u201d, None)]</p> PARAMETER DESCRIPTION <code>iterable</code> <p>The iterable to combine into pairs.</p> <p> TYPE: <code>Iterable</code> </p> RETURNS DESCRIPTION <code>Iterable</code> <p>An iterable of pairs.</p>"},{"location":"reference/api/generate_changelog/utilities/#generate_changelog.utilities.resolve_name","title":"resolve_name","text":"<pre><code>resolve_name(\n    obj: Any, name: str, default: Any = None\n) -&gt; Any\n</code></pre> <p>Get a key or attr <code>name</code> from obj or default value.</p> <p>Copied and modified from Django Template variable resolutions</p> <p>Resolution methods:</p> <ul> <li>Mapping key lookup</li> <li>Attribute lookup</li> <li>Sequence index</li> </ul> PARAMETER DESCRIPTION <code>obj</code> <p>The object to access</p> <p> TYPE: <code>Any</code> </p> <code>name</code> <p>A dotted name to the value, such as <code>mykey.0.name</code></p> <p> TYPE: <code>str</code> </p> <code>default</code> <p>If the name cannot be resolved from the object, return this value</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The value at the resolved name or the default value.</p> RAISES DESCRIPTION <code>TypeError</code> <p>If accessing the property raises one of these exceptions.</p> <code>AttributeError</code> <p>If accessing the property raises one of these exceptions.</p>"},{"location":"reference/api/generate_changelog/actions/","title":"Index","text":"<p>Processing module for changelog generation.</p>"},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions.BUILT_INS","title":"BUILT_INS  <code>module-attribute</code>","text":"<pre><code>BUILT_INS = Registry()\n</code></pre> <p>The registered actions that are considered to be built-in.</p>"},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions.Registry","title":"Registry","text":"<pre><code>Registry(\n    initialdata: Optional[\n        MutableMapping[str, Callable]\n    ] = None,\n)\n</code></pre> <p>               Bases: <code>UserDict</code></p> <p>Built-in action registry.</p> <p>This allows setting keys normally. When getting a key, it makes sure the appropriate modules are imported to fill the internal dictionary before getting the key.</p>"},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions.Registry-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions.Registry.__contains__","title":"__contains__","text":"<pre><code>__contains__(key: object) -&gt; bool\n</code></pre> <p>Make sure the built-in actions are loaded before testing containment.</p>"},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions.Registry.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; Callable\n</code></pre> <p>Make sure the built-in actions are loaded.</p>"},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions.Registry.load_builtins","title":"load_builtins","text":"<pre><code>load_builtins() -&gt; None\n</code></pre> <p>Import all submodules so the decorated functions get registered.</p>"},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/#generate_changelog.actions.register_builtin","title":"register_builtin","text":"<pre><code>register_builtin(\n    function_or_name: Union[Callable, str],\n) -&gt; Callable\n</code></pre> <p>A decorator that registers a function with an optional name.</p> Example <p>The simplest usage is to decorate a callable::</p> <pre><code>@register_builtin\ndef do_something(input_text: str) -&gt; str:\n    pass\n</code></pre> <p>That registers the name <code>do_something</code> as a built-in action. You can also pass in a name to the decorator to change the registered name::</p> <pre><code>@register_builtin(\"good_name\")\ndef a_very_bad_name(input_text: str) -&gt; str:\n    pass\n</code></pre> <p>That registers the name <code>good_name</code> as a built-in action for that function.</p> PARAMETER DESCRIPTION <code>function_or_name</code> <p>A callable or custom name.</p> <p> TYPE: <code>Union[Callable, str]</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>The original, but already registered, callable.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/","title":"file_processing","text":"<p>File reading and writing actions.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.IncrementalFileInsert","title":"IncrementalFileInsert  <code>dataclass</code>","text":"<pre><code>IncrementalFileInsert(\n    filename: StrOrCallable,\n    last_heading_pattern: StrOrCallable,\n)\n</code></pre> <p>Replace the start of a file with text.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.IncrementalFileInsert-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.IncrementalFileInsert.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename: StrOrCallable\n</code></pre> <p>The file name to write when called.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.IncrementalFileInsert.last_heading_pattern","title":"last_heading_pattern  <code>instance-attribute</code>","text":"<pre><code>last_heading_pattern: StrOrCallable\n</code></pre> <p>A regular expression to detect the last heading. Content before this position is re-rendered and inserted.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.IncrementalFileInsert-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.IncrementalFileInsert.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; StrOrCallable\n</code></pre> <p>Replace the beginning of the file up to <code>last_heading_pattern</code> with <code>input_text</code> .</p> PARAMETER DESCRIPTION <code>input_text</code> <p>The text to insert.</p> <p> TYPE: <code>StrOrCallable</code> </p> RETURNS DESCRIPTION <code>StrOrCallable</code> <p>The same <code>input_text</code></p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.ReadFile","title":"ReadFile  <code>dataclass</code>","text":"<pre><code>ReadFile(\n    filename: StrOrCallable, create_if_missing: bool = True\n)\n</code></pre> <p>Return a file\u2019s contents when called.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.ReadFile-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.ReadFile.create_if_missing","title":"create_if_missing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>create_if_missing: bool = True\n</code></pre> <p>When True, create a missing file. Otherwise returns an error.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.ReadFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename: StrOrCallable\n</code></pre> <p>The file name to read when called.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.ReadFile-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.ReadFile.__call__","title":"__call__","text":"<pre><code>__call__(*args, **kwargs) -&gt; str\n</code></pre> <p>Return the contents of the file.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.WriteFile","title":"WriteFile  <code>dataclass</code>","text":"<pre><code>WriteFile(filename: StrOrCallable)\n</code></pre> <p>Write the passed string to a file when called.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.WriteFile-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.WriteFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename: StrOrCallable\n</code></pre> <p>The file name to write when called.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.WriteFile-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.WriteFile.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; StrOrCallable\n</code></pre> <p>Writes input_text to the pre-configured file.</p>"},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/file_processing/#generate_changelog.actions.file_processing.stdout","title":"stdout","text":"<pre><code>stdout(content: str) -&gt; str\n</code></pre> <p>Write content to stdout.</p>"},{"location":"reference/api/generate_changelog/actions/matching/","title":"matching","text":"<p>Commit matching functions.</p>"},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.MetadataMatch","title":"MetadataMatch","text":"<pre><code>MetadataMatch(attribute: str, operator: str, value: Any)\n</code></pre> <p>Evaluates an attribute in the metadata against a value using an operator.</p> <p>Examples:</p> <p>To group breaking changes::</p> <pre><code>- action: MetadataMatch\n  category: Breaking Changes\n  kwargs:\n    attribute: has_breaking_change\n    operator: is\n    value: True\n</code></pre> <p>To match a specific value::</p> <pre><code>- action: MetadataMatch\n  category: Feature\n  kwargs:\n    attribute: commit_type\n    operator: ==\n    value: feat\n</code></pre> <p>To match multiple values::</p> <pre><code>- action: MetadataMatch\n  category: Updates\n  kwargs:\n    attribute: commit_type\n    operator: in\n    value: [\"fix\", \"refactor\", \"update\"]\n</code></pre> <p>Valid operators: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>is</code>, <code>is not</code>, <code>in</code>, <code>not in</code></p> ATTRIBUTE DESCRIPTION <code>operator_map</code> <p>A map of operator names to operators</p> <p> TYPE: <code>Dict[str, Callable]</code> </p> PARAMETER DESCRIPTION <code>attribute</code> <p>The name of the metadata key whose value will be evaluated</p> <p> TYPE: <code>str</code> </p> <code>operator</code> <p>One of the valid operators described above</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The value to evaluate the against the metadata</p> <p> TYPE: <code>Any</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If the operator value is not recognized</p>"},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.MetadataMatch-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.MetadataMatch.operator_map","title":"operator_map  <code>class-attribute</code>","text":"<pre><code>operator_map: Dict[str, Callable] = {\n    \"==\": eq,\n    \"!=\": ne,\n    \"&lt;\": lt,\n    \"&gt;\": gt,\n    \"&gt;=\": ge,\n    \"&lt;=\": le,\n    \"is\": is_,\n    \"is not\": is_not,\n    \"in\": contains,\n    \"not in\": lambda x, y: x not in y,\n}\n</code></pre> <p>Mapping of operator strings to functions for evaluation.</p>"},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.MetadataMatch-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.MetadataMatch.__call__","title":"__call__","text":"<pre><code>__call__(commit: CommitContext) -&gt; bool\n</code></pre> <p>Does the commit metadata attribute meet the conditional?</p>"},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.SummaryRegexMatch","title":"SummaryRegexMatch","text":"<pre><code>SummaryRegexMatch(pattern: Optional[str] = None)\n</code></pre> <p>Matches the commit summary using a regular expression.</p> <p>If <code>pattern</code> is <code>None</code> all commits will match.</p> Example <p>In <code>.changelog-config.yaml</code> ::</p> <pre><code>commit_classifiers:\n- action: SummaryRegexMatch\n  category: New\n  kwargs:\n    pattern: (?i)^(?:new|add)[^\\n]*$\n</code></pre> PARAMETER DESCRIPTION <code>pattern</code> <p>The pattern to match against the commit summary</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.SummaryRegexMatch-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching.SummaryRegexMatch.__call__","title":"__call__","text":"<pre><code>__call__(commit: CommitContext) -&gt; bool\n</code></pre> <p>Does the commit summary match the pattern?</p>"},{"location":"reference/api/generate_changelog/actions/matching/#generate_changelog.actions.matching-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/metadata/","title":"metadata","text":"<p>Metadata callback and processing functions.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.MetadataCollector","title":"MetadataCollector  <code>dataclass</code>","text":"<pre><code>MetadataCollector(metadata: dict = dict())\n</code></pre> <p>Creates a callable to collect key-value metadata.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.MetadataCollector-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.MetadataCollector.__call__","title":"__call__","text":"<pre><code>__call__(**kwargs: dict)\n</code></pre> <p>Put keyword arguments into metadata storage.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>keyword arguments to update metadata</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseAzureBoardIssue","title":"ParseAzureBoardIssue","text":"<pre><code>ParseAzureBoardIssue(\n    commit_metadata: Callable,\n    issue_pattern: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>ParseIssue</code></p> <p>Parse Azure board issues from commits.</p> <p>Link these Azure board issues to their source using a URL pattern like:</p> <p>https://dev.azure.com///_workitems/edit/ References <ul> <li>https://docs.microsoft.com/en-us/azure/devops/boards/github/link-to-from-github</li> </ul>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseBreakingChangeFooter","title":"ParseBreakingChangeFooter","text":"<pre><code>ParseBreakingChangeFooter(commit_metadata: Callable)\n</code></pre> <p>Parse a breaking change footer.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseBreakingChangeFooter-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseBreakingChangeFooter.__call__","title":"__call__","text":"<pre><code>__call__(message: str) -&gt; str\n</code></pre> <p>Parse a BREAKING CHANGE footer.</p> PARAMETER DESCRIPTION <code>message</code> <p>The commit message</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The commit message for later processing.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseConventionalCommit","title":"ParseConventionalCommit","text":"<pre><code>ParseConventionalCommit(commit_metadata: Callable)\n</code></pre> <p>Parse a line of text using the conventional commit syntax.</p> <p>The metadata will contain <code>commit_type</code>, a string and <code>scopes</code>, an empty list or a list of strings.</p> <p>If a breaking change is indicated (with the <code>!</code>), metadata will also contain <code>has_breaking_change</code> set to <code>True</code>.</p> <p>The description is returned for further processing.</p> <p>If the summary does not match a conventional commit, the whole line is returned.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseConventionalCommit-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseConventionalCommit.__call__","title":"__call__","text":"<pre><code>__call__(message: str) -&gt; str\n</code></pre> <p>Parse a line of text using the conventional commit syntax.</p> PARAMETER DESCRIPTION <code>message</code> <p>The commit message</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The description for later processing.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseGitHubIssue","title":"ParseGitHubIssue","text":"<pre><code>ParseGitHubIssue(\n    commit_metadata: Callable,\n    issue_pattern: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>ParseIssue</code></p> <p>Parse GitHub issue references from commits.</p> <p>Link these GitHub issues to their source using a URL pattern like:</p> <p>https://github.com///issues/ References <ul> <li>https://docs.github.com/en/        get-started/writing-on-github/working-with-advanced-formatting/autolinked-references-and-urls</li> </ul>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseIssue","title":"ParseIssue","text":"<pre><code>ParseIssue(\n    commit_metadata: Callable,\n    issue_pattern: Optional[str] = None,\n)\n</code></pre> <p>Base class to parse an issue reference and put it into the commit metadata.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseIssue-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseIssue.__call__","title":"__call__","text":"<pre><code>__call__(message: str) -&gt; str\n</code></pre> <p>Put the issue(s) reference into the commit metadata using the keyword <code>issue</code> .</p> PARAMETER DESCRIPTION <code>message</code> <p>The commit message</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The commit message for later processing.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseJiraIssue","title":"ParseJiraIssue","text":"<pre><code>ParseJiraIssue(\n    commit_metadata: Callable,\n    issue_pattern: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>ParseIssue</code></p> <p>Parse Jira issues from commits.</p> <p>https://support.atlassian.com/jira-software-cloud/docs/process-issues-with-smart-commits/</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseTrailers","title":"ParseTrailers","text":"<pre><code>ParseTrailers(commit_metadata: Callable)\n</code></pre> <p>Parse and extract trailers from a commit message.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseTrailers-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata.ParseTrailers.__call__","title":"__call__","text":"<pre><code>__call__(message: str) -&gt; str\n</code></pre> <p>Parse and extract trailers from a commit message.</p>"},{"location":"reference/api/generate_changelog/actions/metadata/#generate_changelog.actions.metadata-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/shell/","title":"shell","text":"<p>Shell commands for processing.</p>"},{"location":"reference/api/generate_changelog/actions/shell/#generate_changelog.actions.shell-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/shell/#generate_changelog.actions.shell.bash","title":"bash","text":"<pre><code>bash(\n    script: str, environment: Optional[dict] = None\n) -&gt; str\n</code></pre> <p>Runs command-line programs using the bash\u2019s shell.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/","title":"text_processing","text":"<p>Text functions.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing-classes","title":"Classes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.AppendString","title":"AppendString  <code>dataclass</code>","text":"<pre><code>AppendString(postfix: StrOrCallable = '')\n</code></pre> <p>Create a callable that can append a string to the input.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.AppendString-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.AppendString.postfix","title":"postfix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>postfix: StrOrCallable = ''\n</code></pre> <p>The string to append.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.AppendString-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.AppendString.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Append a string to the input_text.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatch","title":"FirstRegExMatch  <code>dataclass</code>","text":"<pre><code>FirstRegExMatch(\n    pattern: StrOrCallable,\n    ascii_flag: bool = False,\n    ignorecase_flag: bool = False,\n    locale_flag: bool = False,\n    multiline_flag: bool = False,\n    dotall_flag: bool = False,\n    verbose_flag: bool = False,\n    named_subgroup: Optional[str] = None,\n    default_value: StrOrCallable = \"\",\n)\n</code></pre> <p>               Bases: <code>RegExCommand</code></p> <p>When called, returns the first match in a string using a predefined regex.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatch-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatch.default_value","title":"default_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_value: StrOrCallable = ''\n</code></pre> <p>The value to return if no match is found.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatch.named_subgroup","title":"named_subgroup  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>named_subgroup: Optional[str] = None\n</code></pre> <p>The named subgroup defined in the pattern to return.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatch-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatch.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Search the input_text for the predefined pattern and return it.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatchPosition","title":"FirstRegExMatchPosition  <code>dataclass</code>","text":"<pre><code>FirstRegExMatchPosition(\n    pattern: StrOrCallable,\n    ascii_flag: bool = False,\n    ignorecase_flag: bool = False,\n    locale_flag: bool = False,\n    multiline_flag: bool = False,\n    dotall_flag: bool = False,\n    verbose_flag: bool = False,\n)\n</code></pre> <p>               Bases: <code>RegExCommand</code></p> <p>When called, returns the position of the first match in a string using a predefined regex.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatchPosition-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.FirstRegExMatchPosition.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; int\n</code></pre> <p>Search the input_text for the predefined pattern and return its position.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixLines","title":"PrefixLines  <code>dataclass</code>","text":"<pre><code>PrefixLines(\n    prefix: StrOrCallable,\n    first_line: Optional[StrOrCallable] = None,\n)\n</code></pre> <p>Creates a callable to prefix lines to input text.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixLines-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixLines.first_line","title":"first_line  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>first_line: Optional[StrOrCallable] = None\n</code></pre> <p>Prefix the first line with these characters.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixLines.prefix","title":"prefix  <code>instance-attribute</code>","text":"<pre><code>prefix: StrOrCallable\n</code></pre> <p>The characters to put in front of each line.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixLines-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixLines.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Prepend characters to the lines in input text.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixString","title":"PrefixString  <code>dataclass</code>","text":"<pre><code>PrefixString(prefix: StrOrCallable = '')\n</code></pre> <p>Prefix a string to the input when called.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixString-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixString.prefix","title":"prefix  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prefix: StrOrCallable = ''\n</code></pre> <p>The string to prefix</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixString-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.PrefixString.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Prefix input_text.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegExCommand","title":"RegExCommand  <code>dataclass</code>","text":"<pre><code>RegExCommand(\n    pattern: StrOrCallable,\n    ascii_flag: bool = False,\n    ignorecase_flag: bool = False,\n    locale_flag: bool = False,\n    multiline_flag: bool = False,\n    dotall_flag: bool = False,\n    verbose_flag: bool = False,\n)\n</code></pre> <p>A base class to hold regular expression information.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegExCommand-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegExCommand.flags","title":"flags  <code>property</code>","text":"<pre><code>flags: RegexFlag\n</code></pre> <p>The combined RegexFlags.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegExCommand.pattern","title":"pattern  <code>instance-attribute</code>","text":"<pre><code>pattern: StrOrCallable\n</code></pre> <p>The regular expression to match against.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegexSub","title":"RegexSub  <code>dataclass</code>","text":"<pre><code>RegexSub(\n    pattern: StrOrCallable,\n    ascii_flag: bool = False,\n    ignorecase_flag: bool = False,\n    locale_flag: bool = False,\n    multiline_flag: bool = False,\n    dotall_flag: bool = False,\n    verbose_flag: bool = False,\n    replacement: StrOrCallable = \"\",\n)\n</code></pre> <p>               Bases: <code>RegExCommand</code></p> <p>Create a callable that will make substitutions using regular expressions.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegexSub-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegexSub.replacement","title":"replacement  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>replacement: StrOrCallable = ''\n</code></pre> <p>The replacement string for matches.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegexSub-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.RegexSub.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Do the substitution on the input_text.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.SetDefault","title":"SetDefault  <code>dataclass</code>","text":"<pre><code>SetDefault(default: StrOrCallable = '')\n</code></pre> <p>Return a default value when called with an empty value.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.SetDefault-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.SetDefault.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Return a default value when called with an empty value.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Slice","title":"Slice  <code>dataclass</code>","text":"<pre><code>Slice(\n    start: Optional[IntOrCallable] = None,\n    stop: Optional[IntOrCallable] = None,\n    step: Optional[IntOrCallable] = None,\n)\n</code></pre> <p>When called, return a slice of the sequence.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Slice-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Slice.start","title":"start  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start: Optional[IntOrCallable] = None\n</code></pre> <p>The start of the slice. None means the beginning of the sequence.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Slice.step","title":"step  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>step: Optional[IntOrCallable] = None\n</code></pre> <p>Slice using this step betweeen indices. None means don\u2019t use the step.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Slice.stop","title":"stop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stop: Optional[IntOrCallable] = None\n</code></pre> <p>The end of the slice. None means the end of the sequence.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Slice-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Slice.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Slice the sequence.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Strip","title":"Strip  <code>dataclass</code>","text":"<pre><code>Strip(chars: StrOrCallable = ' ')\n</code></pre> <p>Create a callable that will strip a string from the ends of an input.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Strip-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.Strip.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Strip characters from the ends of the input.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.WrapParagraphs","title":"WrapParagraphs  <code>dataclass</code>","text":"<pre><code>WrapParagraphs(\n    paragraph_pattern: StrOrCallable = \"\\n\\n\",\n    paragraph_join: StrOrCallable = \"\\n\\n\",\n    width: int = 88,\n)\n</code></pre> <p>Create a callable to wrap the paragraphs of a string.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.WrapParagraphs-attributes","title":"Attributes","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.WrapParagraphs.paragraph_join","title":"paragraph_join  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paragraph_join: StrOrCallable = '\\n\\n'\n</code></pre> <p>Join the wrapped paragraphs with this string.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.WrapParagraphs.paragraph_pattern","title":"paragraph_pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paragraph_pattern: StrOrCallable = '\\n\\n'\n</code></pre> <p>Pattern to detect paragraphs.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.WrapParagraphs.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: int = 88\n</code></pre> <p>The maximum width of each line of the paragraph.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.WrapParagraphs-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.WrapParagraphs.__call__","title":"__call__","text":"<pre><code>__call__(input_text: StrOrCallable) -&gt; str\n</code></pre> <p>Wrap each paragraph of the input text.</p>"},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing-functions","title":"Functions","text":""},{"location":"reference/api/generate_changelog/actions/text_processing/#generate_changelog.actions.text_processing.capitalize","title":"capitalize","text":"<pre><code>capitalize(msg: str) -&gt; str\n</code></pre> <p>Capitalize the first character for a string.</p> PARAMETER DESCRIPTION <code>msg</code> <p>The string to capitalize</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The capitalized string</p>"},{"location":"reference/templating/changelog-context/","title":"Changelog Context","text":"Name Type Description config <code>Configuration</code> The changelog generation configuration. versions <code>list</code> of <code>VersionContext</code> The version contexts to render in the changelog. unreleased_label <code>string</code> The configured label used as the version title of the changes since the last valid tag. valid_author_tokens <code>list</code> of <code>string</code> The configured tokens in git commit trailers that indicate authorship. group_by <code>list</code> of <code>string</code> The configured grouping aspects for commits within a version. group_depth <code>int</code> The number of levels version commits are grouped by. diff_index <code>function</code> The index of the first difference between two lists"},{"location":"reference/templating/commit-context/","title":"Commit Context","text":"<p>This is the context structure for each commit in the templates</p> Name Type Description sha <code>string</code> The full hex SHA of the commit. short_sha <code>string</code> The first seven characters of the hex sha. commit_datetime <code>datetime</code> The date and time of the commit with timezone offset. summary <code>string</code> The first line of the commit message. body <code>string</code> The commit message sans the first line. committer <code>string</code> The name and email of the committer as <code>name &lt;email@ex.com&gt;</code>. authors <code>list</code> of <code>dict</code> with <code>name</code> and <code>email</code> keys A list of authors\u2019 names and emails related to the commit.This will always contain the committer. If the <code>ParseTrailers</code> Action was configured in the {attr}<code>~.Configuration.body_pipeline</code> (the default), this will also include names and emails of people included in the commit trailers as configured via {attr}<code>~.Configuration.valid_author_tokens</code>. author_names <code>list</code> of <code>string</code> A list of just author names, extracted from <code>authors</code>. grouping <code>tuple</code> The values to group this commit based on the {attr}<code>~.Configuration.group_by</code> configuration. metadata <code>dict</code> Metadata for this commit parsed from the commit message. Metadata is generated from Actions in a Pipeline."},{"location":"reference/templating/commit-context/#commit-metadata","title":"Commit metadata","text":"Name Type Availability Description category <code>string</code> <ul><li><code>SummaryRegexMatch</code></li><li><code>MetadataMatch</code></li></ul> This value is set using the first Action in the {attr}<code>~.Configuration.commit_classifiers</code> configuration that returns a value. trailers <code>dict</code> <ul><li><code>ParseTrailers</code></li></ul> The git trailers parsed out of the commit body. issue <code>list</code> of <code>string</code> <ul><li><code>ParseIssue</code></li><li><code>ParseGitHubIssue</code></li><li><code>ParseJiraIssue</code></li><li><code>ParseAzureBoardIssue</code></li></ul> A list of issues parsed from the commit. has_breaking_change <code>boolean</code> <ul><li><code>ParseBreakingChangeFooter</code></li><li><code>ParseConventionalCommit</code></li></ul> Indicates this commit has a breaking change. It doesn\u2019t mean that there is a description of the breaking change. breaking_changes <code>string</code> <ul><li><code>ParseBreakingChangeFooter</code></li></ul> Description of breaking changes as parsed from the commit body. scope <code>list</code> of <code>string</code> <ul><li><code>ParseConventionalCommit</code></li></ul> Zero or more scopes parsed from the commit summary."},{"location":"reference/templating/templates/","title":"Templates","text":"<p>The changelog is generated with over-ridable Jinja templates. You don\u2019t have to override all the templates, simply the ones you want to.</p> <p>You can configure where <code>generate-changelog</code> looks for <code>custom templates</code>.</p> <p>The core of the changelog is the commit. The rest is just a grouping of the commits in a desired method.</p>"},{"location":"reference/templating/templates/#basemdjinja","title":"base.md.jinja","text":"<p>The base template is rendered when generating the changelog from scratch. Incremental generations will only use the heading and versions templates.</p> base.md.jinja<pre><code>{% include \"heading.md.jinja\" %}\n\n{% include \"versions.md.jinja\" %}\n\n{% include \"footer.md.jinja\" %}\n</code></pre>"},{"location":"reference/templating/templates/#headingmdjinja","title":"heading.md.jinja","text":"<p>The heading template is rendered for the title of the changelog.</p> heading.md.jinja<pre><code># Changelog\n</code></pre>"},{"location":"reference/templating/templates/#versionsmdjinja","title":"versions.md.jinja","text":"versions.md.jinja<pre><code>{% for version in versions -%}\n{% include \"version_heading.md.jinja\" %}\n\n{% for grp_commit in version.grouped_commits -%}\n    {% if loop.previtem is defined %}\n        {% set heading_level = diff_index(loop.previtem.grouping, grp_commit.grouping) %}\n    {% else %}\n        {% set heading_level = 0 %}\n    {%- endif %}\n    {% for level in range(heading_level, group_depth) -%}\n        {% include \"section_heading.md.jinja\" %}\n    {% endfor %}\n\n    {% for commit in grp_commit.commits %}\n        {% include \"commit.md.jinja\" %}\n    {% endfor %}\n{%- endfor %}\n{%- endfor %}\n</code></pre> <p>To understand how this template works, understanding how the commits are processed and grouped will help.</p> <p>The commits are enriched with metadata and sorted by the version and grouping values. In this table you can see the commit version and the values of the <code>group_by</code> configuration, sorted. </p> version committer, metadata.category Commit 1.0.1 Alice, Changes commit8 1.0.1 Alice, New commit2 1.0.1 Alice, New commit5 1.0.1 Bob, Changes commit7 1.0.1 Bob, Fixes commit10 1.0.1 Bob, New commit1 1.0.1 Bob, New commit4 1.0.1 Charly, Changes commit6 1.0.1 Charly, Fixes commit9 1.0.1 Charly, New commit3 <p>This is consolidated into the context that looks something like this (See the VersionContext for better information):</p> <pre><code>simplified_version_context = {\n    \"label\": \"1.0.1\",\n    \"grouped_commits\": {\n        (\"Alice\", \"Changes\"): [\"commit8\"],\n        (\"Alice\", \"New\"): [\"commit2\", \"commit5\"],\n        (\"Bob\", \"Changes\"): [\"commit7\"],\n        (\"Bob\", \"Fixes\"): [\"commit10\"],\n        (\"Bob\", \"New\"): [\"commit1\", \"commit4\"],\n        (\"Charly\", \"Changes\"): [\"commit6\"],\n        (\"Charly\", \"Fixes\"): [\"commit9\"],\n        (\"Charly\", \"New\"): [\"commit3\"],\n    }\n}\n</code></pre> <p>The template looks for changes in the grouping values and renders section headings for the new value. The result is something like:</p> <pre><code>## 1.0.1 (2022-01-01)\n\n### Alice\n\n#### Changes\n\n- commit8\n\n#### New\n\n- commit2\n\n- commit5\n\n...\n</code></pre>"},{"location":"reference/templating/templates/#version_headingmdjinja","title":"version_heading.md.jinja","text":"<p>The version heading template is rendered for the title of each tagged version.</p> version_heading.md.jinja<pre><code>## {{ version.label }} ({{ version.date_time.strftime(\"%Y-%m-%d\") }})\n</code></pre>"},{"location":"reference/templating/templates/#section_headingmdjinja","title":"section_heading.md.jinja","text":"<p>The section heading template is rendered for the value changes in the grouping. The heading level is adjusted based on the <code>level</code> parameter set in the <code>version_heading.md.jinja</code> template.</p> section_heading.md.jinja<pre><code>###{{ \"#\" * level }} {{ grp_commit.grouping[level] or \"Other\" }}\n</code></pre>"},{"location":"reference/templating/templates/#commitmdjinja","title":"commit.md.jinja","text":"<p>This template is rendered for each commit.</p> commit.md.jinja<pre><code>- {{ commit.summary }}\n  {{ commit.body|indent(2, first=True) }}\n  {% for key, val in commit.metadata[\"trailers\"].items() %}\n  {% if key not in valid_author_tokens %}\n  **{{ key }}:** {{ val|join(\", \") }}\n\n  {% endif %}\n{% endfor %}\n</code></pre>"},{"location":"reference/templating/templates/#footermdjinja","title":"footer.md.jinja","text":"<p>The default footer templaate is blank. You can override this to add your own information.</p> footer.md.jinja"},{"location":"reference/templating/version-context/","title":"Version Context","text":"Name Type Description label <code>string</code> The version label. date_time <code>datetime</code> The date and time with timezone offset the version was tagged. tag <code>string</code> The tag. previous_tag <code>string</code> The previous tag. tagger <code>string</code> The name and email of the person who tagged this version in <code>name &lt;email@ex.com&gt;</code> format. grouped_commits <code>list</code> of <code>GroupingContext</code> The sections that group the commits in this version. metadata <code>dict</code> Metadata for this version parsed from commits."},{"location":"reference/templating/version-context/#grouping-context","title":"Grouping Context","text":"Name Type Description grouping <code>list</code> of <code>string</code> The values that group these commits based on the <code>group_by</code> configuration commits <code>list</code> of <code>CommitContext</code> The commits with this grouping"},{"location":"tutorials/","title":"Index","text":"<p>title: Tutorials  summary: Tutorials for how to use {{ cookiecutter.project_short_description }}. date: {% now \u2018local\u2019, \u2018%Y-%m-%d\u2019 %}</p> <p>This page provides tutorials on how to use {{cookiecutter.project_name}}.</p> <p>Warning</p> <p>Tutorials not implemented yet! Tutorials are for learning how to use the package.</p> <p>Tutorials are lessons that take the reader by the hand through a series of steps to complete a project of some kind. Tutorials are learning-oriented.</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them write code</li> <li>Inspire confidence through examples that work for everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> <li>More information</li> </ul>"}]}